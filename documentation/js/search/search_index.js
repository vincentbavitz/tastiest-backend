var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AdminController.html",[0,1.088,1,2.215]],["body/controllers/AdminController.html",[0,0.755,1,2.322,2,0.755,3,0.175,4,0.175,5,0.152,6,1.954,7,1.393,8,2.137,9,0.275,10,0.925,11,2.719,12,2.953,13,2.953,14,3.503,15,1.954,16,2.14,17,1.583,18,0.027,19,3.503,20,0.713,21,2.318,22,3.503,23,2.485,24,2.829,25,1.196,26,1.115,27,0.602,28,1.196,29,3.968,30,1.115,31,2.539,32,2.318,33,5.518,34,3.503,35,2.318,36,2.953,37,3.503,38,3.968,39,3.503,40,3.503,41,1.411,42,3.503,43,2.953,44,1.954,45,2.318,46,5.682,47,3.503,48,2.318,49,3.968,50,3.503,51,2.953,52,1.772,53,1.954,54,3.503,55,3.503,56,0.319,57,1.275,58,2.953,59,1.393,60,0.249,61,0.933,62,1.005,63,1.005,64,2.322,65,1.954,66,2.318,67,0.175,68,0.009,69,0.869,70,0.755,71,2.318,72,1.475,73,2.318,74,2.318,75,2.318,76,2.318,77,2.318,78,2.318,79,0.014,80,0.014]],["title/modules/AdminModule.html",[81,1.015,82,2.01]],["body/modules/AdminModule.html",[1,3.764,2,1.675,3,0.303,4,0.303,5,0.263,18,0.026,56,0.428,60,0.43,64,3.485,65,3.383,67,0.303,68,0.016,79,0.02,80,0.02,81,1.562,82,3.81,83,1.616,84,2.072,85,3.383,86,3.383,87,2.406,88,1.876,89,1.739,90,4.012,91,2.603,92,4.012]],["title/injectables/AdminService.html",[64,1.838,93,0.611]],["body/injectables/AdminService.html",[3,0.168,4,0.168,5,0.146,9,0.264,10,0.897,11,2.446,12,2.864,13,2.864,15,2.864,16,2.107,18,0.027,20,0.573,23,1.588,24,2.042,25,0.962,26,0.897,27,0.485,28,0.962,29,1.877,30,1.087,31,2.042,36,5.029,43,3.473,44,2.864,53,1.877,56,0.256,58,2.864,60,0.239,64,1.868,67,0.168,68,0.009,69,0.834,70,0.725,72,1.61,79,0.02,80,0.013,93,0.621,94,0.834,95,1.877,96,2.225,97,3.396,98,3.473,99,5.61,100,2.225,101,3.048,102,5.231,103,4.119,104,5.231,105,4.411,106,3.473,107,2.265,108,4.119,109,4.119,110,4.119,111,4.119,112,3.396,113,3.396,114,4.185,115,2.864,116,3.396,117,3.396,118,3.396,119,3.396,120,1.475,121,3.396,122,1.273,123,1.338,124,1.126,125,1.877,126,1.877,127,1.041,128,1.126,129,2.864,130,1.472,131,2.225,132,2.225,133,1.877,134,2.225,135,1.877,136,1.647,137,1.338,138,2.225]],["title/controllers/AppController.html",[0,1.088,139,2.215]],["body/controllers/AppController.html",[0,1.574,2,1.187,3,0.275,4,0.275,5,0.239,9,0.432,10,1.276,11,2.887,17,1.812,18,0.027,20,0.816,30,1.276,56,0.365,60,0.391,67,0.275,68,0.014,69,1.367,70,1.187,72,1.688,79,0.019,80,0.019,139,3.204,140,3.074,141,5.774,142,5.774,143,4.833,144,3.646,145,5.774,146,4.833,147,3.646,148,2.982,149,3.074,150,4.833]],["title/modules/AppModule.html",[81,1.015,151,2.215]],["body/modules/AppModule.html",[2,1.18,3,0.183,4,0.183,5,0.159,10,0.64,18,0.027,20,0.409,25,0.687,26,0.64,27,0.346,28,0.687,30,0.64,56,0.465,60,0.26,67,0.183,68,0.01,79,0.014,80,0.014,81,1.1,82,3.25,83,0.977,84,1.459,87,1.694,88,1.134,89,1.051,91,1.834,139,2.876,148,2.973,149,2.045,151,4.285,152,2.045,153,2.045,154,2.045,155,3.25,156,3.25,157,3.25,158,3.25,159,3.25,160,2.425,161,3.055,162,2.425,163,3.624,164,4.814,165,2.425,166,2.425,167,1.794,168,3.624,169,2.425,170,2.045,171,1.458,172,2.425,173,1.607,174,2.425,175,2.425,176,2.425,177,1.607,178,2.425,179,1.607,180,2.045,181,2.425,182,2.425,183,2.425,184,2.425,185,2.425,186,2.425,187,1.607,188,2.425,189,1.794,190,2.425,191,2.045,192,2.425,193,2.425]],["title/injectables/AppService.html",[93,0.611,148,1.838]],["body/injectables/AppService.html",[3,0.364,4,0.364,5,0.316,18,0.026,56,0.364,60,0.517,67,0.364,68,0.019,79,0.023,80,0.023,93,1.053,94,1.806,148,3.169,194,4.062]],["title/modules/EmailModule.html",[81,1.015,195,2.215]],["body/modules/EmailModule.html",[2,1.252,3,0.29,4,0.29,5,0.252,18,0.026,56,0.42,60,0.412,67,0.29,68,0.015,79,0.02,80,0.02,81,1.52,83,1.549,84,2.016,87,2.341,88,1.799,89,1.667,91,2.533,161,3.243,170,4.221,171,2.313,195,4.229,196,3.243,197,3.243,198,3.243,199,3.384,200,3.847,201,4.221,202,3.243]],["title/classes/EmailScheduleDto.html",[68,0.013,203,2.01]],["body/classes/EmailScheduleDto.html",[3,0.254,4,0.254,5,0.221,9,0.399,16,2.53,17,2.096,18,0.027,20,0.944,27,0.798,41,1.357,56,0.254,67,0.346,68,0.018,79,0.018,80,0.018,101,3.391,187,3.038,203,3.132,204,1.704,205,2.959,206,2.84,207,1.846,208,4.392,209,3.453,210,4.392,211,3.453,212,3.391,213,3.368,214,5.209,215,3.368,216,5.209,217,3.368,218,3.368,219,3.453,220,3.453,221,2.025]],["title/controllers/EmailSchedulingController.html",[0,1.088,222,2.473]],["body/controllers/EmailSchedulingController.html",[0,1.177,2,1.177,3,0.273,4,0.273,5,0.237,7,2.173,9,0.429,10,1.269,11,2.525,17,1.355,18,0.027,20,0.61,25,1.024,26,0.954,27,0.516,28,1.024,30,0.954,41,1.456,56,0.407,57,1.988,59,2.173,60,0.388,67,0.273,68,0.014,70,1.177,79,0.019,80,0.019,203,3.459,205,2.432,222,3.556,223,3.048,224,3.578,225,4.806,226,4.052,227,3.048,228,4.806,229,3.615,230,4.052,231,3.048,232,2.525,233,2.396,234,3.615,235,1.988,236,1.69,237,3.615,238,3.615,239,3.615]],["title/injectables/EmailSchedulingService.html",[93,0.611,232,1.563]],["body/injectables/EmailSchedulingService.html",[3,0.205,4,0.205,5,0.178,9,0.322,10,1.04,18,0.027,20,0.665,25,0.769,26,0.717,27,0.387,28,0.769,30,1.04,41,1.093,56,0.425,60,0.291,61,1.093,62,1.177,63,1.177,67,0.205,68,0.011,70,1.282,79,0.016,80,0.016,93,0.72,94,1.018,124,2.345,127,1.269,130,1.707,167,2.914,173,1.799,199,2.345,202,2.289,203,3.056,205,2.345,209,1.799,211,2.61,224,1.799,226,3.321,227,3.321,230,2.289,231,2.289,232,1.841,235,1.493,236,1.841,240,2.289,241,5.083,242,2.715,243,2.715,244,3.907,245,2.289,246,2.715,247,2.289,248,2.715,249,3.938,250,2.715,251,2.715,252,2.289,253,3.938,254,3.938,255,4.634,256,3.938,257,3.938,258,2.715,259,2.715,260,2.009,261,2.715,262,4.634,263,2.715,264,2.715,265,2.715]],["title/injectables/EmailService.html",[93,0.611,199,1.691]],["body/injectables/EmailService.html",[3,0.252,4,0.252,5,0.219,9,0.396,10,1.203,18,0.027,20,0.769,23,1.562,25,0.946,26,0.882,27,0.65,28,0.946,30,0.882,41,1.346,56,0.42,60,0.358,67,0.252,68,0.013,69,1.252,70,1.088,72,1.167,79,0.018,80,0.018,93,0.833,94,1.252,127,1.562,171,2.009,179,2.215,199,2.306,207,1.836,236,2.426,252,4.374,266,2.817,267,5.188,268,4.558,269,4.558,270,5.188,271,3.341,272,2.472,273,3.341,274,4.374,275,4.558,276,2.817,277,3.341,278,3.341,279,3.341,280,3.341,281,3.341,282,3.341,283,3.341,284,3.341]],["title/interfaces/Error.html",[137,2.01,285,2.01]],["body/interfaces/Error.html",[3,0.306,4,0.306,5,0.266,9,0.48,16,2.559,18,0.027,27,0.739,56,0.306,60,0.434,67,0.306,68,0.016,79,0.02,80,0.02,120,3.431,137,3.883,207,2.085,285,2.435,286,4.051,287,2.997,288,3.984,289,2.435,290,3.416,291,3.416,292,2.997,293,3.416]],["title/modules/FirebaseModule.html",[81,1.015,155,2.01]],["body/modules/FirebaseModule.html",[3,0.297,4,0.297,5,0.258,18,0.026,56,0.383,60,0.422,67,0.297,68,0.016,79,0.02,80,0.02,81,1.543,83,1.585,84,2.047,87,2.376,88,1.841,89,1.706,91,2.572,122,2.515,155,3.857,201,4.285,294,3.319,295,3.319,296,3.319,297,3.937,298,5.082,299,3.319]],["title/injectables/FirebaseService.html",[93,0.611,122,1.253]],["body/injectables/FirebaseService.html",[3,0.188,4,0.188,5,0.164,8,1.263,9,0.296,16,1.492,18,0.028,20,0.922,24,2.227,27,0.356,41,2.101,56,0.368,60,0.268,61,1.006,62,1.082,63,1.082,67,0.188,68,0.01,69,0.936,72,1.822,79,0.015,80,0.015,93,0.677,94,0.936,122,1.388,127,1.167,128,2.234,130,1.605,171,1.501,207,1.492,236,2.064,274,4.118,300,2.105,301,4.415,302,2.428,303,4.415,304,4.415,305,4.415,306,3.86,307,2.497,308,3.703,309,2.497,310,2.497,311,2.497,312,2.497,313,2.497,314,2.74,315,2.105,316,2.497,317,1.847,318,2.497,319,2.497,320,2.497,321,2.497,322,2.497,323,2.497,324,2.497,325,2.497,326,2.497,327,2.497,328,2.497,329,2.497,330,2.497,331,2.497,332,2.105,333,2.497,334,2.497,335,2.497,336,2.497,337,2.497,338,2.455,339,2.497,340,3.703,341,2.497]],["title/classes/NotifyDto.html",[68,0.013,342,2.01]],["body/classes/NotifyDto.html",[3,0.246,4,0.246,5,0.214,8,1.651,9,0.387,16,2.511,17,2.168,18,0.027,20,0.976,27,0.825,41,1.314,52,1.651,56,0.246,67,0.246,68,0.018,79,0.018,80,0.018,98,3.782,107,2.818,204,1.651,207,1.806,211,3.396,212,4.083,219,3.834,220,3.834,221,1.962,302,1.795,338,3.396,342,3.081,343,2.752,344,4.321,345,4.321,346,3.263,347,5.124,348,3.263,349,3.263,350,3.263,351,3.263,352,2.415,353,2.163]],["title/injectables/PreAuthMiddleware.html",[93,0.611,177,2.215]],["body/injectables/PreAuthMiddleware.html",[3,0.171,4,0.171,5,0.149,8,1.147,9,0.269,10,0.91,16,1.678,18,0.027,20,0.786,24,2.071,25,1.18,26,1.1,27,0.714,28,1.18,30,0.91,38,1.912,56,0.351,60,0.243,67,0.171,68,0.009,69,0.85,79,0.014,80,0.014,93,0.63,94,0.85,105,3.924,107,2.291,115,2.905,122,1.744,124,1.147,128,1.743,130,0.983,136,1.678,167,3.443,177,2.283,179,3.831,180,1.912,189,1.678,191,1.912,207,1.388,224,1.503,235,1.247,236,2.464,288,1.503,299,1.912,332,2.905,354,4.22,355,1.912,356,4.166,357,3.445,358,2.267,359,3.445,360,3.445,361,5.643,362,4.618,363,2.267,364,3.445,365,3.445,366,4.654,367,2.267,368,2.267,369,1.912,370,3.445,371,1.912,372,3.445,373,2.267,374,2.267,375,1.503,376,2.267,377,2.267,378,4.166,379,2.267,380,2.267,381,2.267,382,2.267,383,2.267,384,3.445,385,2.267,386,1.912,387,2.267,388,2.267,389,2.267]],["title/controllers/RestaurantsController.html",[0,1.088,390,2.215]],["body/controllers/RestaurantsController.html",[0,1.162,2,1.162,3,0.269,4,0.269,5,0.234,7,2.145,9,0.423,10,1.258,11,2.508,17,1.338,18,0.027,20,0.602,25,1.011,26,0.942,27,0.509,28,1.011,30,0.942,31,2.145,56,0.432,57,1.963,59,2.145,60,0.383,67,0.269,68,0.014,70,1.552,72,1.246,79,0.019,80,0.019,205,1.806,232,2.508,233,2.365,235,1.963,236,2.228,342,3.442,390,3.158,391,3.009,392,3.569,393,4.765,394,3.569,395,4.765,396,3.569,397,4.765,398,3.009,399,2.95,400,3.009,401,3.569,402,3.569,403,3.569]],["title/modules/RestaurantsModule.html",[81,1.015,156,2.01]],["body/modules/RestaurantsModule.html",[2,1.565,3,0.273,4,0.273,5,0.237,18,0.026,56,0.452,60,0.388,67,0.273,68,0.014,79,0.019,80,0.019,81,1.459,83,1.456,84,1.936,87,2.247,88,1.69,89,1.567,91,2.432,156,3.924,199,3.116,205,1.829,232,2.88,233,2.396,390,3.578,399,3.387,400,3.048,404,3.048,405,3.048,406,3.615,407,3.615,408,3.615]],["title/injectables/RestaurantsService.html",[93,0.611,399,1.838]],["body/injectables/RestaurantsService.html",[3,0.172,4,0.172,5,0.149,9,0.27,10,0.913,11,1.955,18,0.027,20,0.385,25,0.646,26,0.602,27,0.325,28,0.646,30,0.602,31,1.371,51,1.922,56,0.379,60,0.244,61,0.918,62,0.988,63,0.988,67,0.172,68,0.009,70,1.126,72,0.796,79,0.014,80,0.014,89,0.988,93,0.632,94,0.855,101,1.687,107,1.254,114,1.922,120,2.293,122,1.297,123,1.371,124,2.777,125,2.917,126,1.922,127,1.066,128,1.154,129,3.525,130,2.023,205,1.154,208,3.525,209,1.511,210,3.935,211,2.293,224,1.511,232,1.955,233,1.511,235,1.254,236,1.618,245,1.922,260,1.687,315,1.922,338,1.511,342,2.806,344,1.922,345,1.922,353,1.511,375,1.511,398,1.922,399,1.902,409,1.922,410,3.459,411,3.459,412,2.28,413,2.56,414,2.28,415,2.28,416,2.28,417,2.28,418,3.459,419,2.28,420,2.28,421,2.28,422,2.28,423,2.28,424,2.28,425,2.28,426,2.28,427,2.28,428,2.28,429,2.28,430,1.922,431,2.28,432,2.28,433,2.28,434,2.28,435,2.28,436,2.28,437,2.28,438,4.667,439,2.28,440,2.28,441,2.28,442,2.28,443,2.28,444,2.28,445,2.28,446,2.28,447,2.28,448,1.922,449,2.28,450,2.28,451,2.28,452,2.28,453,2.28,454,2.28,455,2.28,456,2.28,457,2.28,458,2.28,459,2.28,460,2.28]],["title/controllers/SupportController.html",[0,1.088,461,2.215]],["body/controllers/SupportController.html",[0,1.075,2,1.075,3,0.249,4,0.249,5,0.216,7,1.985,9,0.392,10,1.194,17,1.695,18,0.027,20,0.763,23,1.544,25,1.28,26,1.194,27,0.645,28,1.28,30,1.194,52,1.671,56,0.418,57,1.816,59,1.985,60,0.354,67,0.249,68,0.013,69,1.238,70,1.075,72,1.579,79,0.018,80,0.018,413,4.103,461,2.997,462,2.784,463,2.784,464,3.812,465,3.812,466,2.784,467,3.334,468,4.521,469,3.302,470,2.784,471,3.334,472,4.521,473,3.302,474,3.812,475,3.812,476,2.835,477,2.784,478,3.302,479,3.302,480,3.302,481,3.302,482,3.302]],["title/modules/SupportModule.html",[81,1.015,157,2.01]],["body/modules/SupportModule.html",[2,1.675,3,0.303,4,0.303,5,0.263,18,0.026,56,0.428,60,0.43,67,0.303,68,0.016,79,0.02,80,0.02,81,1.562,83,1.616,84,2.072,87,2.406,88,1.876,89,1.739,91,2.603,157,3.81,461,3.764,476,3.485,477,3.383,483,3.383,484,3.383,485,4.012,486,4.012]],["title/injectables/SupportService.html",[93,0.611,476,1.838]],["body/injectables/SupportService.html",[3,0.18,4,0.18,5,0.235,9,0.283,10,0.946,11,2.011,18,0.027,20,0.726,23,1.118,25,1.015,26,0.946,27,0.512,28,1.015,30,1.136,31,1.437,52,1.209,56,0.406,60,0.256,61,0.963,62,1.036,63,1.036,67,0.18,68,0.009,69,0.896,70,0.778,72,1.669,79,0.014,80,0.014,93,0.655,94,0.896,122,1.344,123,1.437,124,2.591,127,1.118,128,1.209,130,1.036,187,1.584,260,1.769,288,1.584,302,1.314,314,1.769,317,1.769,375,2.376,413,2.653,430,3.023,464,3.023,465,3.023,466,3.023,467,2.873,470,3.023,471,2.873,474,3.023,475,3.023,476,1.971,487,2.015,488,4.779,489,2.39,490,2.39,491,2.39,492,4.302,493,2.39,494,2.015,495,2.39,496,2.39,497,2.39,498,2.39,499,2.39,500,4.302,501,2.39,502,4.779,503,3.585,504,4.302,505,2.39,506,3.585,507,2.39,508,3.585,509,2.39,510,2.39,511,3.585,512,2.39,513,2.39,514,2.39,515,2.39,516,2.39,517,1.769,518,2.39,519,2.39,520,2.015]],["title/controllers/SyncsController.html",[0,1.088,521,2.215]],["body/controllers/SyncsController.html",[0,1.219,2,1.219,3,0.282,4,0.282,5,0.245,7,2.251,9,0.444,10,1.299,17,1.403,18,0.027,20,0.632,25,1.06,26,0.988,27,0.534,28,1.06,30,0.988,56,0.414,57,3.021,59,2.251,60,0.401,67,0.282,68,0.015,69,1.403,70,1.219,72,1.307,79,0.019,80,0.019,521,3.26,522,3.157,523,3.744,524,4.147,525,3.157,526,4.484,527,4.918,528,3.744,529,3.157,530,3.021,531,3.157,532,3.744,533,3.744,534,3.744]],["title/modules/SyncsModule.html",[81,1.015,158,2.01]],["body/modules/SyncsModule.html",[2,1.675,3,0.303,4,0.303,5,0.263,18,0.026,56,0.428,60,0.43,67,0.303,68,0.016,79,0.02,80,0.02,81,1.562,83,1.616,84,2.072,87,2.406,88,1.876,89,1.739,91,2.603,158,3.81,521,3.764,530,3.485,531,3.383,535,3.383,536,3.383,537,4.012,538,4.012]],["title/injectables/SyncsService.html",[93,0.611,530,1.838]],["body/injectables/SyncsService.html",[3,0.216,4,0.216,5,0.188,9,0.34,10,1.08,18,0.027,20,0.483,23,1.913,25,0.811,26,0.756,27,0.584,28,0.811,30,0.756,49,2.414,56,0.393,57,2.865,60,0.307,61,1.153,62,1.241,63,1.241,67,0.216,68,0.011,69,1.073,70,0.932,72,1,79,0.016,80,0.016,93,0.748,94,1.073,122,1.534,123,1.721,124,2.416,127,1.339,128,1.449,130,1.241,133,2.414,187,1.898,302,1.574,314,2.118,317,2.118,375,1.898,386,4.393,448,2.414,520,2.414,524,3.45,525,3.45,526,4.077,529,2.414,530,2.25,539,2.414,540,2.863,541,2.863,542,2.863,543,2.863,544,2.863,545,2.863,546,4.092,547,2.863,548,4.092,549,2.414,550,2.863,551,2.863,552,2.414,553,4.092,554,2.863,555,2.863,556,2.863,557,2.863,558,2.863,559,2.863,560,2.863]],["title/injectables/TasksService.html",[93,0.611,159,2.01]],["body/injectables/TasksService.html",[3,0.253,4,0.253,5,0.22,9,0.398,10,1.207,11,2.431,17,1.257,18,0.027,20,0.878,27,0.479,30,0.886,41,1.351,56,0.392,60,0.36,67,0.253,68,0.013,69,1.257,70,1.693,79,0.018,80,0.018,93,0.835,94,1.257,122,1.713,123,2.017,127,1.569,128,1.698,130,1.981,159,2.748,173,2.224,207,1.841,236,2.818,244,5.081,247,2.829,306,2.482,561,2.829,562,5.582,563,5.582,564,4.57,565,3.355,566,4.57,567,3.355,568,3.355,569,3.355,570,3.355]],["title/classes/UpdateRestaurantTicketDto.html",[68,0.013,467,2.01]],["body/classes/UpdateRestaurantTicketDto.html",[3,0.215,4,0.215,5,0.186,8,1.439,9,0.337,16,2.303,17,2.06,18,0.027,20,0.928,27,0.741,41,1.145,52,2.98,56,0.307,61,1.145,62,1.233,63,1.233,67,0.215,68,0.016,79,0.016,80,0.016,107,2.616,204,1.439,207,1.64,212,3.52,219,3.442,220,3.79,221,1.71,272,2.104,302,2.616,338,3.153,352,2.104,353,1.885,467,2.86,517,3.013,571,4.231,572,2.104,573,4.011,574,4.011,575,4.011,576,2.843,577,3.433,578,4.011,579,2.843,580,2.843,581,2.398,582,3.433,583,3.433,584,3.433,585,2.843,586,2.398,587,2.398,588,2.398,589,2.398,590,2.398,591,2.398]],["title/classes/UpdateUserTicketDto.html",[68,0.013,471,2.01]],["body/classes/UpdateUserTicketDto.html",[3,0.202,4,0.202,5,0.175,8,1.352,9,0.317,16,2.032,17,2.01,18,0.027,20,0.905,23,2.617,27,0.825,41,1.076,52,1.352,56,0.294,61,1.076,62,1.158,63,1.158,67,0.202,68,0.015,79,0.015,80,0.015,107,2.525,204,1.352,207,1.568,219,3.043,220,3.554,221,1.606,272,1.977,302,2.525,352,1.977,353,1.771,471,2.761,517,2.88,571,4.142,572,1.977,573,3.872,574,3.872,575,3.872,577,3.282,578,3.282,581,2.253,582,3.282,583,3.282,584,3.282,586,2.253,587,2.253,588,2.253,589,2.253,590,2.253,591,2.253,592,2.672,593,3.892,594,3.892,595,3.892,596,2.672,597,2.672,598,2.672,599,3.892,600,2.672,601,4.592,602,2.672,603,3.892,604,3.892,605,3.892,606,2.672,607,2.672,608,5.045,609,2.672,610,2.672]],["title/classes/ValidationException.html",[68,0.013,289,2.01]],["body/classes/ValidationException.html",[3,0.293,4,0.293,5,0.254,9,0.46,16,2.028,18,0.027,20,0.85,25,1.099,26,1.025,27,0.719,28,1.099,56,0.293,60,0.416,67,0.293,68,0.015,79,0.02,80,0.02,120,3.705,137,3.777,204,1.964,207,2.028,235,2.135,285,2.334,287,2.873,288,2.573,289,3.028,290,4.247,291,3.273,292,4.377,293,3.273,611,5.036,612,3.882,613,3.882,614,3.882]],["title/classes/ValidationFilter.html",[68,0.013,615,2.473]],["body/classes/ValidationFilter.html",[3,0.274,4,0.274,5,0.238,9,0.431,10,1.272,18,0.027,20,0.613,25,1.028,26,0.958,27,0.518,28,1.028,30,0.958,56,0.364,60,0.389,67,0.274,68,0.014,72,1.268,79,0.019,80,0.019,124,2.439,136,4.003,189,3.566,204,1.837,289,3.465,292,2.686,362,3.061,615,4.003,616,3.061,617,5.41,618,4.82,619,5.41,620,5.764,621,3.63,622,3.63,623,3.63,624,3.63,625,3.63,626,3.63,627,3.63,628,3.63,629,3.63,630,3.63,631,3.63,632,3.63]],["title/coverage.html",[633,3.373]],["body/coverage.html",[0,1.811,1,1.738,5,0.172,6,2.21,18,0.027,23,1.226,27,0.374,52,1.327,64,1.442,68,0.022,79,0.015,80,0.015,93,1.116,95,2.21,122,0.983,130,1.136,137,1.576,139,1.738,140,2.21,148,1.442,159,1.576,177,1.738,179,1.738,194,2.21,199,1.327,203,1.576,205,2.298,206,2.21,222,1.94,223,2.21,232,1.226,240,2.21,266,2.21,285,1.576,287,2.841,289,1.576,300,2.21,342,1.576,343,2.21,354,2.21,355,2.21,369,2.21,390,1.738,391,2.21,399,1.442,409,2.21,461,1.738,462,2.21,467,1.576,471,1.576,476,1.442,487,2.21,521,1.738,522,2.21,530,1.442,539,2.21,561,2.21,571,2.841,572,2.841,615,1.94,616,2.21,633,1.94,634,2.21,635,2.621,636,2.621,637,2.621,638,2.621,639,2.621,640,2.621,641,6.596,642,5.561,643,3.839,644,5.561,645,3.839,646,2.621,647,2.21,648,2.21,649,2.621,650,3.839,651,3.839,652,3.839,653,2.621,654,2.621]],["title/dependencies.html",[84,1.619,655,2.793]],["body/dependencies.html",[8,1.946,18,0.027,24,2.313,60,0.412,61,1.549,62,1.667,63,1.667,68,0.02,79,0.02,80,0.02,84,1.549,171,2.313,173,2.549,209,2.549,221,2.313,276,3.243,371,3.243,494,3.243,656,3.847,657,3.847,658,5.566,659,3.847,660,3.847,661,3.847,662,3.847,663,3.847,664,3.847,665,3.847,666,3.847,667,3.847,668,3.847,669,3.847,670,3.847,671,3.847,672,3.847,673,3.847,674,3.847,675,3.847,676,3.847,677,3.847,678,3.847,679,3.847,680,3.847]],["title/miscellaneous/enumerations.html",[681,1.536,682,3.389]],["body/miscellaneous/enumerations.html",[9,0.549,18,0.026,79,0.022,80,0.022,106,4.745,306,4.665,549,4.745,552,4.745,681,2.547,682,3.905,683,5.627,684,3.905,685,3.905,686,5.627]],["title/miscellaneous/functions.html",[681,1.536,687,3.389]],["body/miscellaneous/functions.html",[9,0.599,18,0.023,79,0.023,80,0.023,647,4.258,648,5.302,681,2.777,687,4.258,688,5.049]],["title/index.html",[9,0.331,689,2.793,690,2.793]],["body/index.html",[18,0.027,26,1.02,61,2.022,79,0.02,80,0.02,633,2.859,634,3.258,691,5.021,692,3.864,693,3.864,694,5.021,695,5.021,696,5.021,697,3.864,698,3.864,699,3.864,700,3.864,701,3.864,702,3.864,703,6.274,704,6.274,705,3.864,706,5.021,707,3.864,708,3.864,709,3.864,710,3.864,711,5.021,712,5.021,713,3.864,714,3.864,715,3.864]],["title/modules.html",[83,1.836]],["body/modules.html",[18,0.021,79,0.021,80,0.021,82,2.598,83,1.741,151,2.864,155,2.598,156,2.598,157,2.598,158,2.598,195,2.864,463,5.524,716,6.551,717,6.551,718,6.551]],["title/overview.html",[719,3.844]],["body/overview.html",[2,0.923,18,0.026,64,2.611,79,0.016,80,0.016,82,3.3,83,1.141,84,1.636,85,2.39,86,2.39,87,1.899,88,1.325,89,1.228,94,1.062,122,2.205,135,2.39,148,2.611,151,4.336,152,2.39,153,2.39,154,2.39,155,3.434,156,3.683,157,3.3,158,3.3,159,2.854,195,3.638,196,2.39,197,2.39,198,2.39,199,3.045,204,1.434,232,2.22,285,1.704,294,2.39,295,2.39,296,2.39,399,2.611,404,2.39,405,2.39,476,2.611,483,2.39,484,2.39,530,2.611,535,2.39,536,2.39,719,2.39,720,2.834,721,4.062,722,2.834]],["title/miscellaneous/typealiases.html",[681,1.536,723,4.019]],["body/miscellaneous/typealiases.html",[9,0.588,18,0.023,27,0.708,79,0.023,80,0.023,526,4.338,681,2.728,684,4.944,685,4.182,724,4.96,725,5.863]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":643,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":644,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":642,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":652,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":645,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":649,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":646,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":722,"title":{},"body":{"overview.html":{}}}],["1.0.1",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["1.1.16",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["1.39.0",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["1/3",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":651,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":135,"title":{},"body":{"injectables/AdminService.html":{},"overview.html":{}}}],["10.0.0",{"_index":669,"title":{},"body":{"dependencies.html":{}}}],["1000",{"_index":114,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RestaurantsService.html":{}}}],["16",{"_index":650,"title":{},"body":{"coverage.html":{}}}],["2.1.1",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["2.26.0",{"_index":668,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["33",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["4.17.21",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":630,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["5",{"_index":418,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["6",{"_index":721,"title":{},"body":{"overview.html":{}}}],["6.7.1",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":126,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RestaurantsService.html":{}}}],["7",{"_index":720,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":388,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["accessdenied",{"_index":357,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["accessdenied(url",{"_index":360,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["actually",{"_index":510,"title":{},"body":{"injectables/SupportService.html":{}}}],["admin",{"_index":8,"title":{},"body":{"controllers/AdminController.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"dependencies.html":{}}}],["admin.controller",{"_index":92,"title":{},"body":{"modules/AdminModule.html":{}}}],["admin.service",{"_index":65,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{}}}],["admin/admin.module",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["admincontroller",{"_index":1,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"coverage.html":{}}}],["adminmodule",{"_index":82,"title":{"modules/AdminModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["adminservice",{"_index":64,"title":{"injectables/AdminService.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"coverage.html":{},"overview.html":{}}}],["aliases",{"_index":724,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":109,"title":{},"body":{"injectables/AdminService.html":{}}}],["anything",{"_index":512,"title":{},"body":{"injectables/SupportService.html":{}}}],["app",{"_index":701,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":149,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":139,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":151,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":457,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["appservice",{"_index":148,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":620,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["array",{"_index":118,"title":{},"body":{"injectables/AdminService.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/TasksService.html":{}}}],["auth",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"coverage.html":{}}}],["available",{"_index":589,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["await",{"_index":430,"title":{},"body":{"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{}}}],["backend",{"_index":691,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":120,"title":{},"body":{"injectables/AdminService.html":{},"interfaces/Error.html":{},"injectables/RestaurantsService.html":{},"classes/ValidationException.html":{}}}],["badrequestexception('limit",{"_index":131,"title":{},"body":{"injectables/AdminService.html":{}}}],["badrequestexception('template",{"_index":456,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["bash",{"_index":698,"title":{},"body":{"index.html":{}}}],["batch",{"_index":102,"title":{},"body":{"injectables/AdminService.html":{}}}],["below",{"_index":588,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["body",{"_index":57,"title":{},"body":{"controllers/AdminController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{}}}],["body('role",{"_index":77,"title":{},"body":{"controllers/AdminController.html":{}}}],["body.anonymousid",{"_index":543,"title":{},"body":{"injectables/SyncsService.html":{}}}],["body.type",{"_index":548,"title":{},"body":{"injectables/SyncsService.html":{}}}],["body.userid",{"_index":542,"title":{},"body":{"injectables/SyncsService.html":{}}}],["boolean",{"_index":577,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["boolean(body.userid",{"_index":547,"title":{},"body":{"injectables/SyncsService.html":{}}}],["bootstrap",{"_index":648,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":718,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":716,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":604,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["cancelallscheduledemails",{"_index":241,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["catch",{"_index":136,"title":{},"body":{"injectables/AdminService.html":{},"injectables/PreAuthMiddleware.html":{},"classes/ValidationFilter.html":{}}}],["catch(exception",{"_index":618,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["catch(validationexception",{"_index":624,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["changed",{"_index":511,"title":{},"body":{"injectables/SupportService.html":{}}}],["claim",{"_index":50,"title":{},"body":{"controllers/AdminController.html":{}}}],["class",{"_index":68,"title":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":204,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"overview.html":{}}}],["clientemail",{"_index":323,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["cluster_adminmodule",{"_index":85,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_adminmodule_providers",{"_index":86,"title":{},"body":{"modules/AdminModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":153,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":196,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":197,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":198,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_firebasemodule",{"_index":294,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_exports",{"_index":295,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_providers",{"_index":296,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule",{"_index":404,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule_providers",{"_index":405,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_supportmodule",{"_index":483,"title":{},"body":{"modules/SupportModule.html":{},"overview.html":{}}}],["cluster_supportmodule_providers",{"_index":484,"title":{},"body":{"modules/SupportModule.html":{},"overview.html":{}}}],["cluster_syncsmodule",{"_index":535,"title":{},"body":{"modules/SyncsModule.html":{},"overview.html":{}}}],["cluster_syncsmodule_providers",{"_index":536,"title":{},"body":{"modules/SyncsModule.html":{},"overview.html":{}}}],["collection",{"_index":334,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["compodoc/compodoc",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{}}}],["configmodule.forroot",{"_index":185,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":274,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FirebaseService.html":{}}}],["configservice.get('email_password",{"_index":283,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":280,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":281,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('firebase_client_email",{"_index":324,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["configservice.get('firebase_database_url",{"_index":330,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["configservice.get('firebase_project_id",{"_index":322,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["configure",{"_index":162,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log('nothing",{"_index":514,"title":{},"body":{"injectables/SupportService.html":{}}}],["console.log('pre",{"_index":383,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["console.log('sending",{"_index":251,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["const",{"_index":124,"title":{},"body":{"injectables/AdminService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/ValidationFilter.html":{}}}],["constructor",{"_index":235,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"classes/ValidationException.html":{}}}],["constructor(firebaseapp",{"_index":358,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["constructor(private",{"_index":69,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}}}],["constructor(public",{"_index":291,"title":{},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{}}}],["constructor(validationerrors",{"_index":612,"title":{},"body":{"classes/ValidationException.html":{}}}],["consumer",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(preauthmiddleware).forroutes",{"_index":190,"title":{},"body":{"modules/AppModule.html":{}}}],["contains",{"_index":103,"title":{},"body":{"injectables/AdminService.html":{}}}],["content",{"_index":208,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/RestaurantsService.html":{}}}],["content's",{"_index":440,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["context",{"_index":625,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["context.getresponse",{"_index":627,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["controller",{"_index":0,"title":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":66,"title":{},"body":{"controllers/AdminController.html":{}}}],["controller('email",{"_index":234,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["controller('restaurants",{"_index":401,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["controller('support",{"_index":478,"title":{},"body":{"controllers/SupportController.html":{}}}],["controller('syncs",{"_index":532,"title":{},"body":{"controllers/SyncsController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"overview.html":{}}}],["corresponding",{"_index":582,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["coverage",{"_index":633,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdby",{"_index":631,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["createtransport",{"_index":275,"title":{},"body":{"injectables/EmailService.html":{}}}],["credential",{"_index":319,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["critical",{"_index":515,"title":{},"body":{"injectables/SupportService.html":{}}}],["cron",{"_index":247,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/TasksService.html":{}}}],["cron(cronexpression.every_30_seconds",{"_index":564,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronexpression",{"_index":569,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjob",{"_index":246,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(date",{"_index":250,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["daniel",{"_index":445,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["data",{"_index":413,"title":{},"body":{"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["data.priority",{"_index":503,"title":{},"body":{"injectables/SupportService.html":{}}}],["data.resolved",{"_index":506,"title":{},"body":{"injectables/SupportService.html":{}}}],["data.type",{"_index":508,"title":{},"body":{"injectables/SupportService.html":{}}}],["databaseurl",{"_index":329,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["date",{"_index":209,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"injectables/RestaurantsService.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":387,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["date(body.timestamp).gettime",{"_index":544,"title":{},"body":{"injectables/SyncsService.html":{}}}],["date(emailschedule.date",{"_index":248,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date(schedulefor).toutcstring",{"_index":460,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["date.now",{"_index":260,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{}}}],["db",{"_index":301,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["db(firestorecollection.events",{"_index":559,"title":{},"body":{"injectables/SyncsService.html":{}}}],["db(firestorecollection.support_users",{"_index":496,"title":{},"body":{"injectables/SupportService.html":{}}}],["decodedtoken",{"_index":378,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["decodedtoken.email",{"_index":380,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["decodedtoken.roles",{"_index":381,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["decodedtoken.type",{"_index":382,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"classes/NotifyDto.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["default",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["defined",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["denied",{"_index":389,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["dependencies",{"_index":84,"title":{"dependencies.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":53,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["development",{"_index":702,"title":{},"body":{"index.html":{}}}],["different",{"_index":451,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["dlog",{"_index":245,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/RestaurantsService.html":{}}}],["dlog('emailschedule.service",{"_index":253,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["dlog('restaurants.service",{"_index":437,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["doc(data.ticketid",{"_index":497,"title":{},"body":{"injectables/SupportService.html":{}}}],["doc(documentid",{"_index":560,"title":{},"body":{"injectables/SyncsService.html":{}}}],["documentation",{"_index":634,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentation:serverunning",{"_index":700,"title":{},"body":{"index.html":{}}}],["documentid",{"_index":541,"title":{},"body":{"injectables/SyncsService.html":{}}}],["dto/notify.dto",{"_index":398,"title":{},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{}}}],["dto/update",{"_index":474,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["e2e",{"_index":713,"title":{},"body":{"index.html":{}}}],["each",{"_index":101,"title":{},"body":{"injectables/AdminService.html":{},"classes/EmailScheduleDto.html":{},"injectables/RestaurantsService.html":{}}}],["eaters",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{}}}],["eg",{"_index":51,"title":{},"body":{"controllers/AdminController.html":{},"injectables/RestaurantsService.html":{}}}],["email",{"_index":224,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{}}}],["email.service",{"_index":202,"title":{},"body":{"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailmodule",{"_index":195,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedule",{"_index":230,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":257,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipients",{"_index":254,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":255,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":203,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailschedulingcontroller",{"_index":222,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["emailschedulingservice",{"_index":232,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":199,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"modules/RestaurantsModule.html":{},"coverage.html":{},"overview.html":{}}}],["ensure",{"_index":415,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["entry",{"_index":584,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["enumerations",{"_index":682,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":137,"title":{"interfaces/Error.html":{}},"body":{"injectables/AdminService.html":{},"interfaces/Error.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["event",{"_index":553,"title":{},"body":{"injectables/SyncsService.html":{}}}],["everything",{"_index":587,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["example",{"_index":54,"title":{},"body":{"controllers/AdminController.html":{}}}],["exception",{"_index":622,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["exception.validationerrors",{"_index":632,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["exceptionfilter",{"_index":617,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["existing",{"_index":545,"title":{},"body":{"injectables/SyncsService.html":{}}}],["exists",{"_index":550,"title":{},"body":{"injectables/SyncsService.html":{}}}],["export",{"_index":67,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["exports",{"_index":201,"title":{},"body":{"modules/EmailModule.html":{},"modules/FirebaseModule.html":{}}}],["express",{"_index":371,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":290,"title":{},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{}}}],["feature_request",{"_index":605,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{}}}],["filter((follower",{"_index":433,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["find",{"_index":454,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["firebase",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"dependencies.html":{}}}],["firebase.app.app",{"_index":308,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["firebase.auth.auth",{"_index":332,"title":{},"body":{"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{}}}],["firebase.credential.cert",{"_index":320,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["firebase.firestore.firestore",{"_index":336,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["firebase.initializeapp",{"_index":318,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["firebase.service",{"_index":299,"title":{},"body":{"modules/FirebaseModule.html":{},"injectables/PreAuthMiddleware.html":{}}}],["firebase/firebase.module",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["firebase/pre",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["firebaseapp",{"_index":128,"title":{},"body":{"injectables/AdminService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}}}],["firebaseapp.getauth",{"_index":373,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["firebasemodule",{"_index":155,"title":{"modules/FirebaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FirebaseModule.html":{},"modules.html":{},"overview.html":{}}}],["firebaseservice",{"_index":122,"title":{"injectables/FirebaseService.html":{}},"body":{"injectables/AdminService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["firestore",{"_index":302,"title":{},"body":{"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["firestorecollection",{"_index":314,"title":{},"body":{"injectables/FirebaseService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{}}}],["firstname",{"_index":444,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["fns",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["follower",{"_index":450,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["follower.email",{"_index":436,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["follower.notifications",{"_index":434,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["followers",{"_index":425,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["function",{"_index":369,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":687,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":422,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["get('/ping",{"_index":143,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/secure/ping",{"_index":146,"title":{},"body":{"controllers/AppController.html":{}}}],["get('firebase_private_key",{"_index":326,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["get('users",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{}}}],["get('users/:uid",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{}}}],["getauth",{"_index":303,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["getrestaurantdataapi",{"_index":304,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["getting",{"_index":689,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":12,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["getuser(@param('uid",{"_index":74,"title":{},"body":{"controllers/AdminController.html":{}}}],["getuser(uid",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["getuserdataapi",{"_index":305,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["getusers",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["getusers(@param",{"_index":71,"title":{},"body":{"controllers/AdminController.html":{}}}],["getusers(limit",{"_index":97,"title":{},"body":{"injectables/AdminService.html":{}}}],["getusers(roles",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{}}}],["global",{"_index":298,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["group",{"_index":549,"title":{},"body":{"injectables/SyncsService.html":{},"miscellaneous/enumerations.html":{}}}],["high",{"_index":593,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["host",{"_index":619,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["host.switchtohttp",{"_index":626,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["https://api.tastiest.io/admin/users/setuserrole/k6eddii2qax6ozgdq1vemkf9qti2",{"_index":55,"title":{},"body":{"controllers/AdminController.html":{}}}],["id",{"_index":583,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["identifier",{"_index":635,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":552,"title":{},"body":{"injectables/SyncsService.html":{},"miscellaneous/enumerations.html":{}}}],["ignore",{"_index":127,"title":{},"body":{"injectables/AdminService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}}}],["implements",{"_index":189,"title":{},"body":{"modules/AppModule.html":{},"injectables/PreAuthMiddleware.html":{},"classes/ValidationFilter.html":{}}}],["import",{"_index":56,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["imports",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["injectable",{"_index":93,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":94,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["interface",{"_index":285,"title":{"interfaces/Error.html":{}},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":286,"title":{},"body":{"interfaces/Error.html":{}}}],["internalservererrorexception",{"_index":121,"title":{},"body":{"injectables/AdminService.html":{}}}],["interpreter",{"_index":697,"title":{},"body":{"index.html":{}}}],["io/tastiest",{"_index":62,"title":{},"body":{"controllers/AdminController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FirebaseService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"dependencies.html":{}}}],["isbefore(schedulefor",{"_index":417,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["isboolean",{"_index":578,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["isdatestring",{"_index":214,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isemail",{"_index":216,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isequal",{"_index":493,"title":{},"body":{"injectables/SupportService.html":{}}}],["isequal(original",{"_index":513,"title":{},"body":{"injectables/SupportService.html":{}}}],["isglobal",{"_index":186,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":607,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isin(['critical",{"_index":609,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isin(['general",{"_index":610,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isint",{"_index":347,"title":{},"body":{"classes/NotifyDto.html":{}}}],["isnotempty",{"_index":219,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["isnotempty()@isstring",{"_index":599,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isoptional",{"_index":608,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isoptional()@isboolean",{"_index":597,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isoptional()@isstring()@isin(['critical",{"_index":592,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isstring",{"_index":220,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["isstring()@isnotempty",{"_index":212,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{}}}],["isstring()@isoptional()@isin(['general",{"_index":602,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["it's",{"_index":551,"title":{},"body":{"injectables/SyncsService.html":{}}}],["job",{"_index":249,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["job.start",{"_index":261,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["job.stop",{"_index":265,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["jobs",{"_index":262,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["keyed",{"_index":556,"title":{},"body":{"injectables/SyncsService.html":{}}}],["less",{"_index":132,"title":{},"body":{"injectables/AdminService.html":{}}}],["limit",{"_index":111,"title":{},"body":{"injectables/AdminService.html":{}}}],["limits",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{}}}],["list",{"_index":104,"title":{},"body":{"injectables/AdminService.html":{}}}],["listed",{"_index":110,"title":{},"body":{"injectables/AdminService.html":{}}}],["lodash",{"_index":494,"title":{},"body":{"injectables/SupportService.html":{},"dependencies.html":{}}}],["logger",{"_index":562,"title":{},"body":{"injectables/TasksService.html":{}}}],["logger(tasksservice.name",{"_index":566,"title":{},"body":{"injectables/TasksService.html":{}}}],["login",{"_index":352,"title":{},"body":{"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["lookups",{"_index":558,"title":{},"body":{"injectables/SyncsService.html":{}}}],["low",{"_index":595,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["luxon",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["mail",{"_index":252,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{}}}],["mail.options",{"_index":270,"title":{},"body":{"injectables/EmailService.html":{}}}],["many",{"_index":112,"title":{},"body":{"injectables/AdminService.html":{}}}],["map((follower",{"_index":435,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["matching",{"_index":80,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["maxiumum",{"_index":113,"title":{},"body":{"injectables/AdminService.html":{}}}],["merge",{"_index":520,"title":{},"body":{"injectables/SupportService.html":{},"injectables/SyncsService.html":{}}}],["merging",{"_index":554,"title":{},"body":{"injectables/SyncsService.html":{}}}],["message",{"_index":288,"title":{},"body":{"interfaces/Error.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/SupportService.html":{},"classes/ValidationException.html":{}}}],["metadata",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":192,"title":{},"body":{"modules/AppModule.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/ValidationFilter.html":{}}}],["middleware",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"injectables/PreAuthMiddleware.html":{}}}],["middleware.ts",{"_index":355,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"coverage.html":{}}}],["middleware.ts:14",{"_index":367,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["middleware.ts:39",{"_index":363,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["middleware.ts:8",{"_index":359,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["middlewareconsumer",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["minutes",{"_index":421,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["miscellaneous",{"_index":681,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mode",{"_index":706,"title":{},"body":{"index.html":{}}}],["module",{"_index":81,"title":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{}}}],["modules",{"_index":83,"title":{"modules.html":{}},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{},"modules.html":{},"overview.html":{}}}],["ms_in_one_minute",{"_index":125,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RestaurantsService.html":{}}}],["n",{"_index":328,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["name",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"index.html":{}}}],["nestjs",{"_index":692,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":60,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":171,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":370,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["nestmodule",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":130,"title":{},"body":{"injectables/AdminService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["next",{"_index":105,"title":{},"body":{"injectables/AdminService.html":{},"injectables/PreAuthMiddleware.html":{}}}],["nodemailer",{"_index":276,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":277,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":267,"title":{},"body":{"injectables/EmailService.html":{}}}],["normal",{"_index":594,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["notfoundexception",{"_index":414,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["notfoundexception('could",{"_index":453,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["notifications",{"_index":426,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["notify",{"_index":393,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["notify(@body",{"_index":402,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["notify(notifydata",{"_index":394,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["notifydata",{"_index":397,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["notifydto",{"_index":342,"title":{"classes/NotifyDto.html":{}},"body":{"classes/NotifyDto.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{}}}],["npm",{"_index":703,"title":{},"body":{"index.html":{}}}],["null",{"_index":375,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{}}}],["number",{"_index":98,"title":{},"body":{"injectables/AdminService.html":{},"classes/NotifyDto.html":{}}}],["optional",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["options",{"_index":272,"title":{},"body":{"injectables/EmailService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["order",{"_index":603,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["original",{"_index":500,"title":{},"body":{"injectables/SupportService.html":{}}}],["originalsnapshot",{"_index":498,"title":{},"body":{"injectables/SupportService.html":{}}}],["originalsnapshot.data",{"_index":501,"title":{},"body":{"injectables/SupportService.html":{}}}],["out",{"_index":89,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{},"overview.html":{}}}],["overview",{"_index":719,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":655,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":106,"title":{},"body":{"injectables/AdminService.html":{},"miscellaneous/enumerations.html":{}}}],["pagetoken",{"_index":99,"title":{},"body":{"injectables/AdminService.html":{}}}],["pagination",{"_index":116,"title":{},"body":{"injectables/AdminService.html":{}}}],["param",{"_index":58,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["particular",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{}}}],["pass",{"_index":282,"title":{},"body":{"injectables/EmailService.html":{}}}],["path",{"_index":191,"title":{},"body":{"modules/AppModule.html":{},"injectables/PreAuthMiddleware.html":{}}}],["ping",{"_index":141,"title":{},"body":{"controllers/AppController.html":{}}}],["placeholders",{"_index":441,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["please",{"_index":419,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["pm2",{"_index":694,"title":{},"body":{"index.html":{}}}],["pong",{"_index":150,"title":{},"body":{"controllers/AppController.html":{}}}],["post",{"_index":59,"title":{},"body":{"controllers/AdminController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{}}}],["post('notify",{"_index":395,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["post('restaurants/updateticket",{"_index":468,"title":{},"body":{"controllers/SupportController.html":{}}}],["post('schedule",{"_index":228,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('segment",{"_index":527,"title":{},"body":{"controllers/SyncsController.html":{}}}],["post('users/setuserrole/:uid",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{}}}],["post('users/updateticket",{"_index":472,"title":{},"body":{"controllers/SupportController.html":{}}}],["preauthmiddleware",{"_index":177,"title":{"injectables/PreAuthMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/PreAuthMiddleware.html":{},"coverage.html":{}}}],["preauthmiddleware.accessdenied(req.url",{"_index":384,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AdminController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{}}}],["priority",{"_index":573,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["private",{"_index":236,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/TasksService.html":{}}}],["privatekey",{"_index":325,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["production",{"_index":708,"title":{},"body":{"index.html":{}}}],["profiles",{"_index":555,"title":{},"body":{"injectables/SyncsService.html":{}}}],["projectid",{"_index":321,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["promise",{"_index":145,"title":{},"body":{"controllers/AppController.html":{}}}],["properties",{"_index":207,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{}}}],["providers",{"_index":91,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{}}}],["public",{"_index":611,"title":{},"body":{"classes/ValidationException.html":{}}}],["quick",{"_index":557,"title":{},"body":{"injectables/SyncsService.html":{}}}],["readonly",{"_index":70,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}}}],["real",{"_index":442,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["receipients",{"_index":423,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["recipients",{"_index":210,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/RestaurantsService.html":{}}}],["records",{"_index":119,"title":{},"body":{"injectables/AdminService.html":{}}}],["ref",{"_index":495,"title":{},"body":{"injectables/SupportService.html":{}}}],["ref.get",{"_index":499,"title":{},"body":{"injectables/SupportService.html":{}}}],["ref.set(ticket",{"_index":519,"title":{},"body":{"injectables/SupportService.html":{}}}],["reflect",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["replace",{"_index":439,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["replace(/\\\\n/g",{"_index":327,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["replytoticket",{"_index":488,"title":{},"body":{"injectables/SupportService.html":{}}}],["req",{"_index":368,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["req.headers.authorization",{"_index":374,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["req['user",{"_index":379,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["request",{"_index":366,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["requestmethod",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":193,"title":{},"body":{"modules/AppModule.html":{}}}],["res",{"_index":361,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["res.status(403).json",{"_index":385,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["reset",{"_index":88,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{},"overview.html":{}}}],["resolved",{"_index":574,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["response",{"_index":362,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"classes/ValidationFilter.html":{}}}],["response.status(400).json",{"_index":628,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["restaurant",{"_index":52,"title":{},"body":{"controllers/AdminController.html":{},"classes/NotifyDto.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"coverage.html":{}}}],["restaurant's",{"_index":424,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantdata",{"_index":429,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantdata.email?.templates?.[templateid",{"_index":452,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantdata.metrics.followers",{"_index":432,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantdataapi",{"_index":315,"title":{},"body":{"injectables/FirebaseService.html":{},"injectables/RestaurantsService.html":{}}}],["restaurantdataapi(firebase",{"_index":339,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["restaurantdataapi.getrestaurantdata",{"_index":431,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantid",{"_index":338,"title":{},"body":{"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantTicketDto.html":{}}}],["restaurants",{"_index":392,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["restaurants.controller",{"_index":408,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["restaurants.service",{"_index":400,"title":{},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{}}}],["restaurants/restaurants.module",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["restaurantscontroller",{"_index":390,"title":{"controllers/RestaurantsController.html":{}},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"coverage.html":{}}}],["restaurantsmodule",{"_index":156,"title":{"modules/RestaurantsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{},"modules.html":{},"overview.html":{}}}],["restaurantsservice",{"_index":399,"title":{"injectables/RestaurantsService.html":{}},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{},"overview.html":{}}}],["restaurantsupportrequest",{"_index":586,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["restaurantsupportrequest['priority",{"_index":591,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["results",{"_index":79,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":72,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"classes/ValidationFilter.html":{}}}],["returned",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["returns",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/ValidationFilter.html":{}}}],["rimraf",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{}}}],["roles",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"injectables/PreAuthMiddleware.html":{}}}],["run",{"_index":704,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":516,"title":{},"body":{"injectables/SupportService.html":{}}}],["schedule",{"_index":420,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["schedule.controller.ts",{"_index":223,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["schedule.controller.ts:13",{"_index":229,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["schedule.dto",{"_index":231,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedule.dto.ts",{"_index":206,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["schedule.dto.ts:13",{"_index":213,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:16",{"_index":215,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:5",{"_index":217,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:9",{"_index":218,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.service",{"_index":233,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{}}}],["schedule.service.ts",{"_index":240,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["schedule.service.ts:18",{"_index":243,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["schedule.service.ts:47",{"_index":242,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduleemail",{"_index":226,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":238,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":227,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulefollowersemail",{"_index":410,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["schedulefollowersemail(data",{"_index":411,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["schedulefor",{"_index":344,"title":{},"body":{"classes/NotifyDto.html":{},"injectables/RestaurantsService.html":{}}}],["schedulemodule",{"_index":172,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":188,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":244,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/TasksService.html":{}}}],["scheduling",{"_index":225,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["secureping",{"_index":142,"title":{},"body":{"controllers/AppController.html":{}}}],["see",{"_index":117,"title":{},"body":{"injectables/AdminService.html":{}}}],["segmenteventinner",{"_index":725,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["segmenteventtype",{"_index":683,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["segmentwebhookbody",{"_index":526,"title":{},"body":{"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"miscellaneous/typealiases.html":{}}}],["selecting",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{}}}],["selection",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{}}}],["send",{"_index":448,"title":{},"body":{"injectables/RestaurantsService.html":{},"injectables/SyncsService.html":{}}}],["sendmail",{"_index":268,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":269,"title":{},"body":{"injectables/EmailService.html":{}}}],["separate",{"_index":449,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["service",{"_index":279,"title":{},"body":{"injectables/EmailService.html":{}}}],["set",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{},"injectables/SyncsService.html":{}}}],["setuserrole",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{}}}],["setuserrole(@param('uid",{"_index":76,"title":{},"body":{"controllers/AdminController.html":{}}}],["setuserrole(uid",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AdminController.html":{},"modules/AdminModule.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["src/.../main.ts",{"_index":688,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../sync.model.ts",{"_index":684,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/admin/admin.controller.ts",{"_index":6,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/admin/admin.controller.ts:15",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:21",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:31",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.module.ts",{"_index":90,"title":{},"body":{"modules/AdminModule.html":{}}}],["src/admin/admin.service.ts",{"_index":95,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/admin/admin.service.ts:25",{"_index":100,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:37",{"_index":96,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app.controller.ts",{"_index":140,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":147,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":144,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:35",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":194,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/email/email.modules.ts",{"_index":200,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service",{"_index":407,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["src/email/email.service.ts",{"_index":266,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:23",{"_index":271,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":273,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/schedule/email",{"_index":205,"title":{},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{}}}],["src/filters/validation.exception.ts",{"_index":287,"title":{},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["src/filters/validation.exception.ts:8",{"_index":613,"title":{},"body":{"classes/ValidationException.html":{}}}],["src/filters/validation.exception.ts:9",{"_index":614,"title":{},"body":{"classes/ValidationException.html":{}}}],["src/filters/validation.filter.ts",{"_index":616,"title":{},"body":{"classes/ValidationFilter.html":{},"coverage.html":{}}}],["src/filters/validation.filter.ts:6",{"_index":621,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["src/firebase/firebase.module.ts",{"_index":297,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.service",{"_index":123,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}}}],["src/firebase/firebase.service.ts",{"_index":300,"title":{},"body":{"injectables/FirebaseService.html":{},"coverage.html":{}}}],["src/firebase/firebase.service.ts:12",{"_index":309,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/firebase.service.ts:32",{"_index":311,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/firebase.service.ts:36",{"_index":307,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/firebase.service.ts:40",{"_index":310,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/firebase.service.ts:44",{"_index":312,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/firebase.service.ts:48",{"_index":313,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/pre",{"_index":354,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":647,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/restaurants/dto/notify.dto.ts",{"_index":343,"title":{},"body":{"classes/NotifyDto.html":{},"coverage.html":{}}}],["src/restaurants/dto/notify.dto.ts:11",{"_index":346,"title":{},"body":{"classes/NotifyDto.html":{}}}],["src/restaurants/dto/notify.dto.ts:15",{"_index":350,"title":{},"body":{"classes/NotifyDto.html":{}}}],["src/restaurants/dto/notify.dto.ts:19",{"_index":349,"title":{},"body":{"classes/NotifyDto.html":{}}}],["src/restaurants/dto/notify.dto.ts:22",{"_index":348,"title":{},"body":{"classes/NotifyDto.html":{}}}],["src/restaurants/dto/notify.dto.ts:7",{"_index":351,"title":{},"body":{"classes/NotifyDto.html":{}}}],["src/restaurants/restaurants.controller.ts",{"_index":391,"title":{},"body":{"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["src/restaurants/restaurants.controller.ts:14",{"_index":396,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.module.ts",{"_index":406,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["src/restaurants/restaurants.service.ts",{"_index":409,"title":{},"body":{"injectables/RestaurantsService.html":{},"coverage.html":{}}}],["src/restaurants/restaurants.service.ts:23",{"_index":412,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/support/dto/update",{"_index":571,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"coverage.html":{}}}],["src/support/support.controller.ts",{"_index":462,"title":{},"body":{"controllers/SupportController.html":{},"coverage.html":{}}}],["src/support/support.controller.ts:11",{"_index":469,"title":{},"body":{"controllers/SupportController.html":{}}}],["src/support/support.controller.ts:16",{"_index":473,"title":{},"body":{"controllers/SupportController.html":{}}}],["src/support/support.module.ts",{"_index":485,"title":{},"body":{"modules/SupportModule.html":{}}}],["src/support/support.service.ts",{"_index":487,"title":{},"body":{"injectables/SupportService.html":{},"coverage.html":{}}}],["src/support/support.service.ts:18",{"_index":491,"title":{},"body":{"injectables/SupportService.html":{}}}],["src/support/support.service.ts:50",{"_index":490,"title":{},"body":{"injectables/SupportService.html":{}}}],["src/support/support.service.ts:54",{"_index":489,"title":{},"body":{"injectables/SupportService.html":{}}}],["src/syncs/sync.model.ts",{"_index":685,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/syncs/syncs.controller.ts",{"_index":522,"title":{},"body":{"controllers/SyncsController.html":{},"coverage.html":{}}}],["src/syncs/syncs.controller.ts:10",{"_index":528,"title":{},"body":{"controllers/SyncsController.html":{}}}],["src/syncs/syncs.module.ts",{"_index":537,"title":{},"body":{"modules/SyncsModule.html":{}}}],["src/syncs/syncs.service.ts",{"_index":539,"title":{},"body":{"injectables/SyncsService.html":{},"coverage.html":{}}}],["src/syncs/syncs.service.ts:13",{"_index":540,"title":{},"body":{"injectables/SyncsService.html":{}}}],["src/tasks/tasks.service.ts",{"_index":561,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:16",{"_index":565,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:7",{"_index":568,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:8",{"_index":567,"title":{},"body":{"injectables/TasksService.html":{}}}],["start",{"_index":695,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":707,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":709,"title":{},"body":{"index.html":{}}}],["started",{"_index":690,"title":{"index.html":{}},"body":{}}],["starting",{"_index":693,"title":{},"body":{"index.html":{}}}],["startserving",{"_index":699,"title":{},"body":{"index.html":{}}}],["statements",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":356,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["statuscode",{"_index":629,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/EmailScheduleDto.html":{},"interfaces/Error.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{}}}],["subject",{"_index":211,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"classes/NotifyDto.html":{},"injectables/RestaurantsService.html":{}}}],["super",{"_index":293,"title":{},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{}}}],["support",{"_index":463,"title":{},"body":{"controllers/SupportController.html":{},"modules.html":{}}}],["support.controller",{"_index":486,"title":{},"body":{"modules/SupportModule.html":{}}}],["support.service",{"_index":477,"title":{},"body":{"controllers/SupportController.html":{},"modules/SupportModule.html":{}}}],["support/support.module",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["supportcontroller",{"_index":461,"title":{"controllers/SupportController.html":{}},"body":{"controllers/SupportController.html":{},"modules/SupportModule.html":{},"coverage.html":{}}}],["supportmodule",{"_index":157,"title":{"modules/SupportModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SupportModule.html":{},"modules.html":{},"overview.html":{}}}],["supportrequesttype",{"_index":601,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["supportservice",{"_index":476,"title":{"injectables/SupportService.html":{}},"body":{"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"coverage.html":{},"overview.html":{}}}],["svg",{"_index":717,"title":{},"body":{"modules.html":{}}}],["sync.model",{"_index":529,"title":{},"body":{"controllers/SyncsController.html":{},"injectables/SyncsService.html":{}}}],["syncs",{"_index":523,"title":{},"body":{"controllers/SyncsController.html":{}}}],["syncs.controller",{"_index":538,"title":{},"body":{"modules/SyncsModule.html":{}}}],["syncs.service",{"_index":531,"title":{},"body":{"controllers/SyncsController.html":{},"modules/SyncsModule.html":{}}}],["syncs/syncs.module",{"_index":183,"title":{},"body":{"modules/AppModule.html":{}}}],["syncscontroller",{"_index":521,"title":{"controllers/SyncsController.html":{}},"body":{"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"coverage.html":{}}}],["syncsegmentevent",{"_index":524,"title":{},"body":{"controllers/SyncsController.html":{},"injectables/SyncsService.html":{}}}],["syncsegmentevent(@body",{"_index":533,"title":{},"body":{"controllers/SyncsController.html":{}}}],["syncsegmentevent(body",{"_index":525,"title":{},"body":{"controllers/SyncsController.html":{},"injectables/SyncsService.html":{}}}],["syncsmodule",{"_index":158,"title":{"modules/SyncsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SyncsModule.html":{},"modules.html":{},"overview.html":{}}}],["syncsservice",{"_index":530,"title":{"injectables/SyncsService.html":{}},"body":{"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"coverage.html":{},"overview.html":{}}}],["table",{"_index":654,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":653,"title":{},"body":{"coverage.html":{}}}],["tasks/tasks.service",{"_index":184,"title":{},"body":{"modules/AppModule.html":{}}}],["tasksservice",{"_index":159,"title":{"injectables/TasksService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["tastiest",{"_index":61,"title":{},"body":{"controllers/AdminController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FirebaseService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"dependencies.html":{},"index.html":{}}}],["template",{"_index":438,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["template.html",{"_index":458,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["template.isapproved",{"_index":455,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["templateid",{"_index":345,"title":{},"body":{"classes/NotifyDto.html":{},"injectables/RestaurantsService.html":{}}}],["test",{"_index":712,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":715,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":714,"title":{},"body":{"index.html":{}}}],["tests",{"_index":711,"title":{},"body":{"index.html":{}}}],["text",{"_index":256,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["then(async",{"_index":377,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["this.adminservice.getuser(uid",{"_index":75,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.getusers",{"_index":73,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.setuserrole(uid",{"_index":78,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.auth",{"_index":372,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["this.emailschedulingservice.scheduleemail",{"_index":459,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":239,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":258,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.firebaseapp",{"_index":317,"title":{},"body":{"injectables/FirebaseService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{}}}],["this.firebaseapp.auth",{"_index":333,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["this.firebaseapp.auth().setcustomuserclaims",{"_index":331,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["this.firebaseapp.firestore",{"_index":337,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["this.firebaseapp.getauth().getuser(uid",{"_index":138,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.firebaseapp.getauth().listusers(limit",{"_index":134,"title":{},"body":{"injectables/AdminService.html":{}}}],["this.firebaseapp.getrestaurantdataapi(restaurantid",{"_index":428,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.firestore().collection(collection",{"_index":335,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["this.logger.log('sdf",{"_index":570,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.nodemailertransport",{"_index":278,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":284,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.restaurantsservice.schedulefollowersemail(notifydata",{"_index":403,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.schedulerregistry.addcronjob",{"_index":259,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.schedulerregistry.getcronjobs",{"_index":263,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.schedulerregistry.getcronjobs().foreach((job",{"_index":264,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.supportservice.updaterestaurantticket(data",{"_index":480,"title":{},"body":{"controllers/SupportController.html":{}}}],["this.supportservice.updateuserticket(data",{"_index":482,"title":{},"body":{"controllers/SupportController.html":{}}}],["this.syncsservice.syncsegmentevent(body",{"_index":534,"title":{},"body":{"controllers/SyncsController.html":{}}}],["throw",{"_index":129,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RestaurantsService.html":{}}}],["ticket",{"_index":517,"title":{},"body":{"injectables/SupportService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto",{"_index":475,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["ticket.dto.ts",{"_index":572,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"coverage.html":{}}}],["ticket.dto.ts:12",{"_index":580,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{}}}],["ticket.dto.ts:17",{"_index":581,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto.ts:22",{"_index":600,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto.ts:24",{"_index":579,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{}}}],["ticket.dto.ts:27",{"_index":576,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{}}}],["ticket.dto.ts:29",{"_index":598,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto.ts:34",{"_index":596,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto.ts:39",{"_index":606,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto.ts:8",{"_index":585,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{}}}],["ticketid",{"_index":575,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["timestamp",{"_index":386,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"injectables/SyncsService.html":{}}}],["timing",{"_index":416,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["todo",{"_index":446,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["token",{"_index":107,"title":{},"body":{"injectables/AdminService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["track",{"_index":686,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transformer",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":187,"title":{},"body":{"modules/AppModule.html":{},"classes/EmailScheduleDto.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{}}}],["try",{"_index":133,"title":{},"body":{"injectables/AdminService.html":{},"injectables/SyncsService.html":{}}}],["turned",{"_index":427,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["type",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":723,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["uid",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["undefined",{"_index":504,"title":{},"body":{"injectables/SupportService.html":{}}}],["unit",{"_index":710,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{}}}],["update",{"_index":590,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["updated",{"_index":502,"title":{},"body":{"injectables/SupportService.html":{}}}],["updated.priority",{"_index":505,"title":{},"body":{"injectables/SupportService.html":{}}}],["updated.resolved",{"_index":507,"title":{},"body":{"injectables/SupportService.html":{}}}],["updated.type",{"_index":509,"title":{},"body":{"injectables/SupportService.html":{}}}],["updatedat",{"_index":518,"title":{},"body":{"injectables/SupportService.html":{}}}],["updaterestaurants",{"_index":563,"title":{},"body":{"injectables/TasksService.html":{}}}],["updaterestaurantticket",{"_index":464,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["updaterestaurantticket(@body",{"_index":479,"title":{},"body":{"controllers/SupportController.html":{}}}],["updaterestaurantticket(data",{"_index":466,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["updaterestaurantticketdto",{"_index":467,"title":{"classes/UpdateRestaurantTicketDto.html":{}},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"coverage.html":{}}}],["updateuserticket",{"_index":465,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["updateuserticket(@body",{"_index":481,"title":{},"body":{"controllers/SupportController.html":{}}}],["updateuserticket(data",{"_index":470,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["updateuserticketdto",{"_index":471,"title":{"classes/UpdateUserTicketDto.html":{}},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{},"classes/UpdateUserTicketDto.html":{},"coverage.html":{}}}],["url",{"_index":364,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["use",{"_index":115,"title":{},"body":{"injectables/AdminService.html":{},"injectables/PreAuthMiddleware.html":{}}}],["use(req",{"_index":365,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["used",{"_index":108,"title":{},"body":{"injectables/AdminService.html":{}}}],["useguards(jwtauthenticationguard",{"_index":237,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["user",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"injectables/EmailService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/UpdateUserTicketDto.html":{},"coverage.html":{}}}],["userdataapi",{"_index":316,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["userdataapi(firebase",{"_index":341,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["userexists",{"_index":546,"title":{},"body":{"injectables/SyncsService.html":{}}}],["userid",{"_index":340,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["userrole",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{}}}],["users",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["usersupportrequest",{"_index":492,"title":{},"body":{"injectables/SupportService.html":{}}}],["utils",{"_index":63,"title":{},"body":{"controllers/AdminController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FirebaseService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"dependencies.html":{}}}],["valid",{"_index":353,"title":{},"body":{"classes/NotifyDto.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["validation.exception",{"_index":623,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["validationerrors",{"_index":292,"title":{},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["validationexception",{"_index":289,"title":{"classes/ValidationException.html":{}},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{}}}],["validationfilter",{"_index":615,"title":{"classes/ValidationFilter.html":{}},"body":{"classes/ValidationFilter.html":{},"coverage.html":{}}}],["validator",{"_index":221,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"dependencies.html":{}}}],["value",{"_index":306,"title":{},"body":{"injectables/FirebaseService.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":443,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["verifyidtoken(token.replace('bearer",{"_index":376,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["void",{"_index":167,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PreAuthMiddleware.html":{}}}],["watch",{"_index":705,"title":{},"body":{"index.html":{}}}],["work",{"_index":447,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["yarn",{"_index":696,"title":{},"body":{"index.html":{}}}],["yes",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["zoom",{"_index":87,"title":{},"body":{"modules/AdminModule.html":{},"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                setUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(uid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('users/:uid')\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:21\n                \n            \n\n\n            \n                \n                    Get a particular user in Firebase.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(roles?: UserRole[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('users')\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:15\n                \n            \n\n\n            \n                \n                    Get users in Firebase.\nSelecting roles limits selection.\nBy default, only eaters will be returned.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n                                    \n                                            UserRole[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    setUserRole(uid: string, role: UserRole)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('users/setUserRole/:uid')\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:31\n                \n            \n\n\n            \n                \n                    Set a role (claim) on a user. Eg. restaurant or admin.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    role\n                                    \n                                            UserRole\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The role of the user to set.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            https://api.tastiest.io/admin/users/setUserRole/K6edDIi2qAX6OZGdQ1VemKF9QtI2\n                        \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post } from '@nestjs/common';\nimport { UserRole } from '@tastiest-io/tastiest-utils';\nimport { AdminService } from './admin.service';\n\n@Controller('admin')\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  /**\n   * Get users in Firebase.\n   * Selecting roles limits selection.\n   * By default, only eaters will be returned.\n   */\n  @Get('users')\n  async getUsers(@Param() roles?: UserRole[]) {\n    return this.adminService.getUsers();\n  }\n\n  /** Get a particular user in Firebase. */\n  @Get('users/:uid')\n  async getUser(@Param('uid') uid: string) {\n    return this.adminService.getUser(uid);\n  }\n\n  /**\n   * Set a role (claim) on a user. Eg. `restaurant` or `admin`.\n   * @param role The role of the user to set.\n   * @example `https://api.tastiest.io/admin/users/setUserRole/K6edDIi2qAX6OZGdQ1VemKF9QtI2`\n   */\n  @Post('users/setUserRole/:uid')\n  async setUserRole(@Param('uid') uid: string, @Body('role') role: UserRole) {\n    return this.adminService.setUserRole(uid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminModule.html":{"url":"modules/AdminModule.html","title":"module - AdminModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\n\nAdminService\n\nAdminService\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/admin/admin.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AdminService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AdminController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AdminController } from './admin.controller';\nimport { AdminService } from './admin.service';\n\n@Module({\n  controllers: [AdminController],\n  providers: [AdminService],\n})\nexport class AdminModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(limit?: number, pageToken?: string)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:25\n                \n            \n\n\n            \n                \n                    Each batch of results contains a list of users and the next page token used to list the next batch of users. When all the users have already been listed, no pageToken is returned.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    limit\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        How many users to return. Maxiumum of 1000.\n\n                                    \n                                \n                                \n                                    pageToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Use for pagination. See\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        An array of user records from Firebase.\nEach batch of results contains a list of users and the next page token used to list the next batch of users. When all the users have already been listed, no pageToken is returned.\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  InternalServerErrorException,\n} from '@nestjs/common';\nimport { FirebaseService } from 'src/firebase/firebase.service';\n\n// const MS_IN_ONE_MINUTE = 60 * 1000;\n\n@Injectable()\nexport class AdminService {\n  /**\n   * @ignore\n   */\n  constructor(private readonly firebaseApp: FirebaseService) {}\n\n  /**\n   *\n   * @param limit How many users to return. Maxiumum of 1000.\n   * @param pageToken Use for pagination. See\n   * @returns An array of user records from Firebase.\n   *\n   * Each batch of results contains a list of users and the next page token used to list the next batch of users. When all the users have already been listed, no pageToken is returned.\n   */\n  async getUsers(limit?: number, pageToken?: string) {\n    if (limit > 1000) {\n      throw new BadRequestException('Limit must be less than 1000.');\n    }\n\n    try {\n      return this.firebaseApp.getAuth().listUsers(limit ?? 10, pageToken);\n    } catch (error) {\n      throw new InternalServerErrorException();\n    }\n  }\n\n  async getUser(uid: string) {\n    return this.firebaseApp.getAuth().getUser(uid);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ping\n                            \n                            \n                                    Async\n                                securePing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        ping\n                        \n                    \n                \n            \n            \n                \n                    \n                    ping()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/ping')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        securePing\n                        \n                    \n                \n            \n            \n                \n                    \n                    securePing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/secure/ping')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('/ping')\n  async ping(): Promise {\n    return 'pong';\n  }\n\n  @Get('/secure/ping')\n  async securePing(): Promise {\n    return 'pong';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAdminModule\n\nAdminModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nFirebaseModule\n\nFirebaseModule\n\nAppModule -->\n\nFirebaseModule->AppModule\n\n\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nAppModule -->\n\nRestaurantsModule->AppModule\n\n\n\n\n\nSupportModule\n\nSupportModule\n\nAppModule -->\n\nSupportModule->AppModule\n\n\n\n\n\nSyncsModule\n\nSyncsModule\n\nAppModule -->\n\nSyncsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nAppModule -->\n\nTasksService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminModule\n                        \n                        \n                            FirebaseModule\n                        \n                        \n                            RestaurantsModule\n                        \n                        \n                            SupportModule\n                        \n                        \n                            SyncsModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { AdminModule } from './admin/admin.module';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { FirebaseModule } from './firebase/firebase.module';\nimport { PreAuthMiddleware } from './firebase/pre-auth-middleware';\nimport { RestaurantsModule } from './restaurants/restaurants.module';\nimport { SupportModule } from './support/support.module';\nimport { SyncsModule } from './syncs/syncs.module';\nimport { TasksService } from './tasks/tasks.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    FirebaseModule,\n    AdminModule,\n    SyncsModule,\n    SupportModule,\n    RestaurantsModule,\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [AppController],\n  providers: [AppService, TasksService],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(PreAuthMiddleware).forRoutes({\n      path: '/*',\n      method: RequestMethod.ALL,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.modules.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport EmailService from './email.service';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/schedule/email-schedule.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipients\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/schedule/email-schedule.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/schedule/email-schedule.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/schedule/email-schedule.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/schedule/email-schedule.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class EmailScheduleDto {\n  @IsEmail({}, { each: true })\n  recipients: string[];\n\n  @IsString()\n  @IsNotEmpty()\n  subject: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsDateString()\n  date: string;\n}\n\nexport default EmailScheduleDto;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/schedule/email-schedule.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-scheduling\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')\n                \n            \n\n            \n                \n                    Defined in src/email/schedule/email-schedule.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport EmailScheduleDto from './email-schedule.dto';\nimport EmailSchedulingService from './email-schedule.service';\n\n@Controller('email-scheduling')\nexport default class EmailSchedulingController {\n  constructor(\n    private readonly emailSchedulingService: EmailSchedulingService,\n  ) {}\n\n  @Post('schedule')\n  //   @UseGuards(JwtAuthenticationGuard)\n  async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n    this.emailSchedulingService.scheduleEmail(emailSchedule);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/schedule/email-schedule.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelAllScheduledEmails\n                            \n                            \n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancelAllScheduledEmails\n                        \n                    \n                \n            \n            \n                \ncancelAllScheduledEmails()\n                \n            \n\n\n            \n                \n                    Defined in src/email/schedule/email-schedule.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \nscheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/email/schedule/email-schedule.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { dlog } from '@tastiest-io/tastiest-utils';\nimport { CronJob } from 'cron';\nimport EmailService from '../email.service';\nimport EmailScheduleDto from './email-schedule.dto';\n\n@Injectable()\nexport default class EmailSchedulingService {\n  /**\n   * @ignore\n   */\n  constructor(\n    private readonly emailService: EmailService,\n    private readonly schedulerRegistry: SchedulerRegistry,\n  ) {}\n\n  scheduleEmail(emailSchedule: EmailScheduleDto) {\n    const date = new Date(emailSchedule.date);\n    const job = new CronJob(date, () => {\n      console.log('Sending mail!');\n\n      dlog('emailSchedule.service ➡️ ', {\n        to: emailSchedule.recipients,\n        subject: emailSchedule.subject,\n        text: emailSchedule.content,\n      });\n\n      // this.emailService.sendMail({\n      //   to: emailSchedule.recipients,\n      //   subject: emailSchedule.subject,\n      //   text: emailSchedule.content,\n      // });\n    });\n\n    this.schedulerRegistry.addCronJob(\n      `${Date.now()}-${emailSchedule.subject}`,\n      job,\n    );\n\n    job.start();\n\n    const jobs = this.schedulerRegistry.getCronJobs();\n    dlog('emailSchedule.service ➡️ jobs:', jobs);\n  }\n\n  cancelAllScheduledEmails() {\n    this.schedulerRegistry.getCronJobs().forEach((job) => {\n      job.stop();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\nimport * as Mail from 'nodemailer/lib/mailer';\n\n@Injectable()\nexport default class EmailService {\n  private nodemailerTransport: Mail;\n\n  /**\n   * @ignore\n   */\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Error.html":{"url":"interfaces/Error.html","title":"interface - Error","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Error\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/validation.exception.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\ninterface Error {\n  error: string;\n  message: string;\n}\n\nexport class ValidationException extends BadRequestException {\n  constructor(public validationErrors: Error[]) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseModule.html":{"url":"modules/FirebaseModule.html","title":"module - FirebaseModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_exports\n\n\n\ncluster_FirebaseModule_providers\n\n\n\n\nFirebaseService \n\nFirebaseService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nFirebaseService  -->\n\nFirebaseModule->FirebaseService \n\n\n\n\n\nFirebaseService\n\nFirebaseService\n\nFirebaseModule -->\n\nFirebaseService->FirebaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { FirebaseService } from './firebase.service';\n\n@Global()\n@Module({\n  providers: [FirebaseService],\n  exports: [FirebaseService],\n})\nexport class FirebaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseService.html":{"url":"injectables/FirebaseService.html","title":"injectable - FirebaseService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/firebase.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                db\n                            \n                            \n                                    Private\n                                firebaseApp\n                            \n                            \n                                firestore\n                            \n                            \n                                getAuth\n                            \n                            \n                                getRestaurantDataApi\n                            \n                            \n                                getUserDataApi\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        firebaseApp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     firebase.app.App\n\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRestaurantDataApi\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserDataApi\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:48\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  FirestoreCollection,\n  RestaurantDataApi,\n  UserDataApi,\n} from '@tastiest-io/tastiest-utils';\nimport * as firebase from 'firebase-admin';\n\n@Injectable()\nexport class FirebaseService {\n  private firebaseApp: firebase.app.App;\n\n  /**\n   * @ignore\n   */\n  constructor(private configService: ConfigService) {\n    this.firebaseApp = firebase.initializeApp({\n      credential: firebase.credential.cert({\n        projectId: configService.get('FIREBASE_PROJECT_ID'),\n        clientEmail: configService.get('FIREBASE_CLIENT_EMAIL'),\n        privateKey: configService\n          .get('FIREBASE_PRIVATE_KEY')\n          .replace(/\\\\n/g, '\\n'),\n      }),\n      databaseURL: configService.get('FIREBASE_DATABASE_URL'),\n    });\n\n    this.firebaseApp.auth().setCustomUserClaims;\n  }\n\n  getAuth = (): firebase.auth.Auth => {\n    return this.firebaseApp.auth();\n  };\n\n  db = (collection: FirestoreCollection) => {\n    return this.firestore().collection(collection);\n  };\n\n  firestore = (): firebase.firestore.Firestore => {\n    return this.firebaseApp.firestore();\n  };\n\n  getRestaurantDataApi = (restaurantId: string) => {\n    return new RestaurantDataApi(firebase, restaurantId);\n  };\n\n  getUserDataApi = (userId: string) => {\n    return new UserDataApi(firebase, userId);\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotifyDto.html":{"url":"classes/NotifyDto.html","title":"class - NotifyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotifyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restaurants/dto/notify.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                restaurantId\n                            \n                            \n                                scheduleFor\n                            \n                            \n                                subject\n                            \n                            \n                                templateId\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        restaurantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/restaurants/dto/notify.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleFor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/restaurants/dto/notify.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/restaurants/dto/notify.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/restaurants/dto/notify.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/restaurants/dto/notify.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty, IsString } from 'class-validator';\n\nclass NotifyDto {\n  // From Firestore login. Admin or a valid restaurant\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n\n  @IsString()\n  @IsNotEmpty()\n  restaurantId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  templateId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  subject: string;\n\n  @IsInt()\n  scheduleFor: number;\n}\n\nexport default NotifyDto;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PreAuthMiddleware.html":{"url":"injectables/PreAuthMiddleware.html","title":"injectable - PreAuthMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PreAuthMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/pre-auth-middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                auth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                accessDenied\n                            \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseApp: FirebaseService)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/pre-auth-middleware.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseApp\n                                                  \n                                                        \n                                                                        FirebaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        accessDenied\n                        \n                    \n                \n            \n            \n                \n                    \n                    accessDenied(url: string, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/pre-auth-middleware.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/pre-auth-middleware.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :     firebase.auth.Auth\n\n                    \n                \n                    \n                        \n                                Defined in src/firebase/pre-auth-middleware.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport * as firebase from 'firebase-admin';\nimport { FirebaseService } from './firebase.service';\n\n@Injectable()\nexport class PreAuthMiddleware implements NestMiddleware {\n  private auth: firebase.auth.Auth;\n\n  constructor(private firebaseApp: FirebaseService) {\n    this.auth = firebaseApp.getAuth();\n  }\n\n  use(req: Request, res: Response, next: () => void) {\n    const token = req.headers.authorization;\n\n    if (token != null && token != '') {\n      this.auth\n        .verifyIdToken(token.replace('Bearer ', ''))\n        .then(async (decodedToken) => {\n          req['user'] = {\n            email: decodedToken.email,\n            roles: decodedToken.roles || [],\n            type: decodedToken.type,\n          };\n\n          console.log('pre-auth-middleware ➡️ decodedToken:', decodedToken);\n\n          next();\n        })\n        .catch(() => {\n          PreAuthMiddleware.accessDenied(req.url, res);\n        });\n    } else {\n      PreAuthMiddleware.accessDenied(req.url, res);\n    }\n  }\n\n  private static accessDenied(url: string, res: Response) {\n    res.status(403).json({\n      timestamp: new Date().toISOString(),\n      message: 'Access denied',\n      path: url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RestaurantsController.html":{"url":"controllers/RestaurantsController.html","title":"controller - RestaurantsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RestaurantsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restaurants/restaurants.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                restaurants\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                notify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        notify\n                        \n                    \n                \n            \n            \n                \n                    \n                    notify(notifyData: NotifyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notify')\n                \n            \n\n            \n                \n                    Defined in src/restaurants/restaurants.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notifyData\n                                    \n                                                NotifyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport EmailSchedulingService from 'src/email/schedule/email-schedule.service';\nimport NotifyDto from './dto/notify.dto';\nimport { RestaurantsService } from './restaurants.service';\n\n@Controller('restaurants')\nexport class RestaurantsController {\n  constructor(\n    private readonly restaurantsService: RestaurantsService,\n    private readonly emailSchedulingService: EmailSchedulingService,\n  ) {}\n\n  @Post('notify')\n  async notify(@Body() notifyData: NotifyDto) {\n    return this.restaurantsService.scheduleFollowersEmail(notifyData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestaurantsModule.html":{"url":"modules/RestaurantsModule.html","title":"module - RestaurantsModule","body":"\n                   \n\n\n\n\n    Modules\n    RestaurantsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RestaurantsModule\n\n\n\ncluster_RestaurantsModule_providers\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nRestaurantsModule -->\n\nEmailSchedulingService->RestaurantsModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nRestaurantsModule -->\n\nEmailService->RestaurantsModule\n\n\n\n\n\nRestaurantsService\n\nRestaurantsService\n\nRestaurantsModule -->\n\nRestaurantsService->RestaurantsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/restaurants/restaurants.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                        \n                            EmailService\n                        \n                        \n                            RestaurantsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RestaurantsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport EmailService from 'src/email/email.service';\nimport EmailSchedulingService from 'src/email/schedule/email-schedule.service';\nimport { RestaurantsController } from './restaurants.controller';\nimport { RestaurantsService } from './restaurants.service';\n\n@Module({\n  controllers: [RestaurantsController],\n  providers: [RestaurantsService, EmailService, EmailSchedulingService],\n})\nexport class RestaurantsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestaurantsService.html":{"url":"injectables/RestaurantsService.html","title":"injectable - RestaurantsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RestaurantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restaurants/restaurants.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleFollowersEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        scheduleFollowersEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleFollowersEmail(data: NotifyDto)\n                \n            \n\n\n            \n                \n                    Defined in src/restaurants/restaurants.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                NotifyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { dlog } from '@tastiest-io/tastiest-utils';\nimport EmailSchedulingService from 'src/email/schedule/email-schedule.service';\nimport { FirebaseService } from 'src/firebase/firebase.service';\nimport NotifyDto from './dto/notify.dto';\n\n// const MS_IN_ONE_MINUTE = 60 * 1000;\n\n@Injectable()\nexport class RestaurantsService {\n  /**\n   * @ignore\n   */\n  constructor(\n    private readonly emailSchedulingService: EmailSchedulingService,\n    private readonly firebaseApp: FirebaseService,\n  ) {}\n\n  async scheduleFollowersEmail(data: NotifyDto) {\n    const { token, restaurantId, templateId, subject, scheduleFor } = data;\n\n    // Ensure the timing is valid\n    // if (isBefore(scheduleFor, Date.now() + 5 * MS_IN_ONE_MINUTE)) {\n    //   throw new BadRequestException(\n    //     'Please schedule for at least 5 minutes in the future.',\n    //   );\n    // }\n\n    // Receipients are all the restaurant's followers with notifications turned on.\n    const restaurantDataApi =\n      this.firebaseApp.getRestaurantDataApi(restaurantId);\n\n    const restaurantData = await restaurantDataApi.getRestaurantData();\n    const recipients = restaurantData.metrics.followers\n      .filter((follower) => follower.notifications)\n      .map((follower) => follower.email);\n\n    dlog('restaurants.service ➡️ recipients:', recipients);\n\n    // Get template and replace content's placeholders with real values.\n    // Eg {{ firstName }} --> Daniel\n    // TODO: Work out how to send a separate email to each follower with different content.\n    const template = restaurantData.email?.templates?.[templateId] ?? null;\n    if (!template) {\n      throw new NotFoundException('Could not find template.');\n    }\n\n    if (!template.isApproved) {\n      throw new BadRequestException('Template is not approved.');\n    }\n\n    const content = template.html;\n\n    return this.emailSchedulingService.scheduleEmail({\n      recipients,\n      subject,\n      content,\n      date: new Date(scheduleFor).toUTCString(),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SupportController.html":{"url":"controllers/SupportController.html","title":"controller - SupportController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SupportController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/support/support.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                support\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                updateRestaurantTicket\n                            \n                            \n                                updateUserTicket\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        updateRestaurantTicket\n                        \n                    \n                \n            \n            \n                \nupdateRestaurantTicket(data: UpdateRestaurantTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('restaurants/updateTicket')\n                \n            \n\n            \n                \n                    Defined in src/support/support.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateRestaurantTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserTicket\n                        \n                    \n                \n            \n            \n                \nupdateUserTicket(data: UpdateUserTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('users/updateTicket')\n                \n            \n\n            \n                \n                    Defined in src/support/support.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateUserTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport UpdateRestaurantTicketDto from './dto/update-restaurant-ticket.dto';\nimport UpdateUserTicketDto from './dto/update-user-ticket.dto';\nimport { SupportService } from './support.service';\n\n@Controller('support')\nexport class SupportController {\n  constructor(private readonly supportService: SupportService) {}\n\n  @Post('restaurants/updateTicket')\n  updateRestaurantTicket(@Body() data: UpdateRestaurantTicketDto) {\n    return this.supportService.updateRestaurantTicket(data);\n  }\n\n  @Post('users/updateTicket')\n  updateUserTicket(@Body() data: UpdateUserTicketDto) {\n    return this.supportService.updateUserTicket(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SupportModule.html":{"url":"modules/SupportModule.html","title":"module - SupportModule","body":"\n                   \n\n\n\n\n    Modules\n    SupportModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SupportModule\n\n\n\ncluster_SupportModule_providers\n\n\n\n\nSupportService\n\nSupportService\n\n\n\nSupportModule\n\nSupportModule\n\nSupportModule -->\n\nSupportService->SupportModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/support/support.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupportService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SupportController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SupportController } from './support.controller';\nimport { SupportService } from './support.service';\n\n@Module({\n  controllers: [SupportController],\n  providers: [SupportService],\n})\nexport class SupportModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupportService.html":{"url":"injectables/SupportService.html","title":"injectable - SupportService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SupportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/support/support.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                replyToTicket\n                            \n                            \n                                updateRestaurantTicket\n                            \n                            \n                                    Async\n                                updateUserTicket\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        replyToTicket\n                        \n                    \n                \n            \n            \n                \nreplyToTicket()\n                \n            \n\n\n            \n                \n                    Defined in src/support/support.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateRestaurantTicket\n                        \n                    \n                \n            \n            \n                \nupdateRestaurantTicket(data: UpdateRestaurantTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/support/support.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateRestaurantTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserTicket\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserTicket(data: UpdateUserTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/support/support.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateUserTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  FirestoreCollection,\n  UserSupportRequest,\n} from '@tastiest-io/tastiest-utils';\nimport { isEqual } from 'lodash';\nimport { FirebaseService } from 'src/firebase/firebase.service';\nimport UpdateRestaurantTicketDto from './dto/update-restaurant-ticket.dto';\nimport UpdateUserTicketDto from './dto/update-user-ticket.dto';\n\n@Injectable()\nexport class SupportService {\n  /**\n   * @ignore\n   */\n  constructor(private readonly firebaseApp: FirebaseService) {}\n\n  async updateUserTicket(data: UpdateUserTicketDto) {\n    const ref = this.firebaseApp\n      .db(FirestoreCollection.SUPPORT_USERS)\n      .doc(data.ticketId);\n\n    const originalSnapshot = await ref.get();\n    const original = originalSnapshot.data() as UserSupportRequest;\n\n    // Updated file\n    const updated = { ...original };\n\n    if (data.priority !== undefined) updated.priority = data.priority;\n    if (data.resolved !== undefined) updated.resolved = data.resolved;\n    if (data.type !== undefined) updated.type = data.type;\n\n    // Have we actually changed anything?\n    // If not, just return.\n    if (isEqual(original, updated)) {\n      console.log('Nothing changed');\n      return { message: 'critical' };\n    }\n\n    // Save new to Firestore\n    const ticket: UserSupportRequest = {\n      ...original,\n      ...updated,\n      updatedAt: Date.now(),\n    };\n\n    await ref.set(ticket, { merge: true });\n  }\n\n  updateRestaurantTicket(data: UpdateRestaurantTicketDto) {\n    return null;\n  }\n\n  replyToTicket() {\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SyncsController.html":{"url":"controllers/SyncsController.html","title":"controller - SyncsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SyncsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/syncs/syncs.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                syncs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                syncSegmentEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        syncSegmentEvent\n                        \n                    \n                \n            \n            \n                \nsyncSegmentEvent(body: SegmentWebhookBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('segment')\n                \n            \n\n            \n                \n                    Defined in src/syncs/syncs.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SegmentWebhookBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { SegmentWebhookBody } from './sync.model';\nimport { SyncsService } from './syncs.service';\n\n@Controller('syncs')\nexport class SyncsController {\n  constructor(private readonly syncsService: SyncsService) {}\n\n  @Post('segment')\n  syncSegmentEvent(@Body() body: SegmentWebhookBody): any {\n    return this.syncsService.syncSegmentEvent(body as SegmentWebhookBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SyncsModule.html":{"url":"modules/SyncsModule.html","title":"module - SyncsModule","body":"\n                   \n\n\n\n\n    Modules\n    SyncsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SyncsModule\n\n\n\ncluster_SyncsModule_providers\n\n\n\n\nSyncsService\n\nSyncsService\n\n\n\nSyncsModule\n\nSyncsModule\n\nSyncsModule -->\n\nSyncsService->SyncsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/syncs/syncs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SyncsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SyncsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SyncsController } from './syncs.controller';\nimport { SyncsService } from './syncs.service';\n\n@Module({\n  controllers: [SyncsController],\n  providers: [SyncsService],\n})\nexport class SyncsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SyncsService.html":{"url":"injectables/SyncsService.html","title":"injectable - SyncsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SyncsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/syncs/syncs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                syncSegmentEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        syncSegmentEvent\n                        \n                    \n                \n            \n            \n                \nsyncSegmentEvent(body: SegmentWebhookBody)\n                \n            \n\n\n            \n                \n                    Defined in src/syncs/syncs.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SegmentWebhookBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         { body: SegmentWebhookBody; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { FirestoreCollection } from '@tastiest-io/tastiest-utils';\nimport { FirebaseService } from 'src/firebase/firebase.service';\nimport { SegmentWebhookBody } from './sync.model';\n\n@Injectable()\nexport class SyncsService {\n  /**\n   * @ignore\n   */\n  constructor(private readonly firebaseApp: FirebaseService) {}\n\n  syncSegmentEvent(body: SegmentWebhookBody) {\n    const documentId = body.userId ?? body.anonymousId;\n    const timestamp = new Date(body.timestamp).getTime();\n\n    // Is it an existing user?\n    const userExists = Boolean(body.userId);\n    if (userExists && body.type === 'group') {\n      // If the user exists and it's an identify event, try merging the profiles.\n      null;\n    }\n\n    // Send the event to Firestore.\n    // Keyed by timestamp for quick lookups.\n    this.firebaseApp\n      .db(FirestoreCollection.EVENTS)\n      .doc(documentId)\n      .set(\n        {\n          [timestamp]: {\n            ...body,\n            type: body.type,\n            timestamp,\n          },\n        },\n        { merge: true },\n      );\n\n    return { body };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                schedulerRegistry\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                updateRestaurants\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRestaurants\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRestaurants()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_30_SECONDS)\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TasksService.name)\n                    \n                \n                    \n                        \n                                Defined in src/tasks/tasks.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        schedulerRegistry\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SchedulerRegistry\n\n                    \n                \n                    \n                        \n                                Defined in src/tasks/tasks.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression, SchedulerRegistry } from '@nestjs/schedule';\nimport { FirebaseService } from 'src/firebase/firebase.service';\n\n@Injectable()\nexport class TasksService {\n  private schedulerRegistry: SchedulerRegistry;\n  private readonly logger = new Logger(TasksService.name);\n\n  /**\n   * @ignore\n   */\n  constructor(private firebaseApp: FirebaseService) {}\n\n  @Cron(CronExpression.EVERY_30_SECONDS)\n  async updateRestaurants() {\n    this.logger.log('sdf');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRestaurantTicketDto.html":{"url":"classes/UpdateRestaurantTicketDto.html","title":"class - UpdateRestaurantTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRestaurantTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/support/dto/update-restaurant-ticket.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                priority\n                            \n                            \n                                resolved\n                            \n                            \n                                restaurantId\n                            \n                            \n                                ticketId\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-restaurant-ticket.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolved\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-restaurant-ticket.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restaurantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-restaurant-ticket.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ticketId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-restaurant-ticket.dto.ts:17\n                        \n                    \n\n            \n                \n                    The corresponding ticket ID from its Firestore entry.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-restaurant-ticket.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { RestaurantSupportRequest } from '@tastiest-io/tastiest-utils';\nimport { IsBoolean, IsNotEmpty, IsString } from 'class-validator';\n\nclass UpdateRestaurantTicketDto {\n  // From Firestore login. Admin or a valid restaurant\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n\n  @IsString()\n  @IsNotEmpty()\n  restaurantId: string;\n\n  /** The corresponding ticket ID from its Firestore entry. */\n  @IsString()\n  @IsNotEmpty()\n  ticketId: string;\n\n  // /////////////////////////////////////////////////////\n  // Everything below are available options to update   //\n  // /////////////////////////////////////////////////////\n\n  @IsBoolean()\n  resolved: boolean;\n\n  @IsString()\n  priority: RestaurantSupportRequest['priority'];\n}\n\nexport default UpdateRestaurantTicketDto;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserTicketDto.html":{"url":"classes/UpdateUserTicketDto.html","title":"class - UpdateUserTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/support/dto/update-user-ticket.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                priority\n                            \n                            \n                                resolved\n                            \n                            \n                                ticketId\n                            \n                            \n                                token\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsIn(['critical', 'high', 'normal', 'low'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-user-ticket.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolved\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-user-ticket.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ticketId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-user-ticket.dto.ts:22\n                        \n                    \n\n            \n                \n                    The corresponding ticket ID from its Firestore entry.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-user-ticket.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SupportRequestType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@IsIn(['GENERAL', 'ORDER', 'OTHER', 'BUG', 'FEATURE_REQUEST'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-user-ticket.dto.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  RestaurantSupportRequest,\n  SupportRequestType,\n} from '@tastiest-io/tastiest-utils';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nclass UpdateUserTicketDto {\n  // From Firestore login. Admin or a valid restaurant\n  @IsNotEmpty()\n  @IsString()\n  token: string;\n\n  /** The corresponding ticket ID from its Firestore entry. */\n  @IsNotEmpty()\n  @IsString()\n  ticketId: string;\n\n  // /////////////////////////////////////////////////////\n  // Everything below are available options to update   //\n  // /////////////////////////////////////////////////////\n  @IsOptional()\n  @IsBoolean()\n  resolved: boolean;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['critical', 'high', 'normal', 'low'])\n  priority: RestaurantSupportRequest['priority'];\n\n  @IsString()\n  @IsOptional()\n  @IsIn(['GENERAL', 'ORDER', 'OTHER', 'BUG', 'FEATURE_REQUEST'])\n  type: SupportRequestType;\n}\n\nexport default UpdateUserTicketDto;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationException.html":{"url":"classes/ValidationException.html","title":"class - ValidationException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/validation.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validationErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(validationErrors: Error[])\n                    \n                \n                        \n                            \n                                Defined in src/filters/validation.exception.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        validationErrors\n                                                  \n                                                        \n                                                                        Error[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        validationErrors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Error[]\n\n                    \n                \n                    \n                        \n                                Defined in src/filters/validation.exception.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\ninterface Error {\n  error: string;\n  message: string;\n}\n\nexport class ValidationException extends BadRequestException {\n  constructor(public validationErrors: Error[]) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationFilter.html":{"url":"classes/ValidationFilter.html","title":"class - ValidationFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/validation.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: ValidationException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/validation.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                ValidationException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\nimport { ValidationException } from './validation.exception';\n\n@Catch(ValidationException)\nexport class ValidationFilter implements ExceptionFilter {\n  catch(exception: ValidationException, host: ArgumentsHost): any {\n    const context = host.switchToHttp();\n    const response = context.getResponse();\n    return response.status(400).json({\n      statusCode: 400,\n      createdBy: 'ValidationFilter',\n      validationErrors: exception.validationErrors,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email/schedule/email-schedule.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/schedule/email-schedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/email/schedule/email-schedule.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filters/validation.exception.ts\n            \n            class\n            ValidationException\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filters/validation.exception.ts\n            \n            interface\n            Error\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filters/validation.filter.ts\n            \n            class\n            ValidationFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/firebase/firebase.service.ts\n            \n            injectable\n            FirebaseService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/firebase/pre-auth-middleware.ts\n            \n            injectable\n            PreAuthMiddleware\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/dto/notify.dto.ts\n            \n            class\n            NotifyDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/restaurants/restaurants.controller.ts\n            \n            controller\n            RestaurantsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/restaurants/restaurants.service.ts\n            \n            injectable\n            RestaurantsService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/support/dto/update-restaurant-ticket.dto.ts\n            \n            class\n            UpdateRestaurantTicketDto\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/support/dto/update-user-ticket.dto.ts\n            \n            class\n            UpdateUserTicketDto\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/support/support.controller.ts\n            \n            controller\n            SupportController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/support/support.service.ts\n            \n            injectable\n            SupportService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/syncs/syncs.controller.ts\n            \n            controller\n            SyncsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/syncs/syncs.service.ts\n            \n            injectable\n            SyncsService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.16\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.0.2\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/schedule : ^1.0.1\n        \n            @tastiest-io/tastiest-utils : ^1.39.0\n        \n            class-transformer : 0.4.0\n        \n            class-validator : ^0.13.2\n        \n            date-fns : ^2.26.0\n        \n            firebase-admin : ^10.0.0\n        \n            lodash : ^4.17.21\n        \n            luxon : ^2.1.1\n        \n            nodemailer : ^6.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SegmentEventType   (src/.../sync.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/syncs/sync.model.ts\n    \n        \n            \n                \n                    \n                        \n                        SegmentEventType\n                    \n                \n                        \n                            \n                                 TRACK\n                            \n                        \n                        \n                            \n                                Value : track\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 GROUP\n                            \n                        \n                        \n                            \n                                Value : group\n                            \n                        \n                        \n                            \n                                 IDENTIFY\n                            \n                        \n                        \n                            \n                                Value : identify\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nTastiest Backend - NestJS\nStarting with PM2\npm2 start yarn --interpreter bash --name tastiest-backend -- startServing Documentation\nyarn documentation:serveRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AdminModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestaurantsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SupportModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SyncsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AdminModule\n\n\n\ncluster_AdminModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_exports\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_RestaurantsModule\n\n\n\ncluster_RestaurantsModule_providers\n\n\n\ncluster_SupportModule\n\n\n\ncluster_SupportModule_providers\n\n\n\ncluster_SyncsModule\n\n\n\ncluster_SyncsModule_providers\n\n\n\n\nAdminService\n\nAdminService\n\n\n\nAdminModule\n\nAdminModule\n\nAdminModule -->\n\nAdminService->AdminModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAdminModule->AppModule\n\n\n\n\n\nFirebaseModule\n\nFirebaseModule\n\nAppModule -->\n\nFirebaseModule->AppModule\n\n\n\n\n\nFirebaseService \n\nFirebaseService \n\nFirebaseService  -->\n\nFirebaseModule->FirebaseService \n\n\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nAppModule -->\n\nRestaurantsModule->AppModule\n\n\n\n\n\nSupportModule\n\nSupportModule\n\nAppModule -->\n\nSupportModule->AppModule\n\n\n\n\n\nSyncsModule\n\nSyncsModule\n\nAppModule -->\n\nSyncsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nAppModule -->\n\nTasksService->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nRestaurantsModule -->\n\nEmailService->RestaurantsModule\n\n\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nFirebaseService\n\nFirebaseService\n\nFirebaseModule -->\n\nFirebaseService->FirebaseModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nRestaurantsModule -->\n\nEmailSchedulingService->RestaurantsModule\n\n\n\n\n\nRestaurantsService\n\nRestaurantsService\n\nRestaurantsModule -->\n\nRestaurantsService->RestaurantsModule\n\n\n\n\n\nSupportService\n\nSupportService\n\nSupportModule -->\n\nSupportService->SupportModule\n\n\n\n\n\nSyncsService\n\nSyncsService\n\nSyncsModule -->\n\nSyncsService->SyncsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SegmentEventInner   (src/.../sync.model.ts)\n                        \n                        \n                            SegmentWebhookBody   (src/.../sync.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/syncs/sync.model.ts\n    \n    \n        \n            \n                \n                    \n                    SegmentEventInner\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SegmentWebhookBody\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
