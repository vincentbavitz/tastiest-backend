var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AdminController.html",[0,1.062,1,2.448]],["body/controllers/AdminController.html",[0,0.79,1,2.703,2,0.849,3,0.193,4,0.193,5,0.168,6,2.077,7,1.475,8,2.194,9,0.275,10,0.946,11,2.725,12,3.084,13,3.084,14,4.836,15,2.077,16,1.739,17,1.616,18,0.028,19,3.663,20,0.708,21,2.467,22,3.663,23,2.594,24,3.192,25,1.016,26,0.946,27,0.497,28,1.016,29,3.084,30,1.128,31,2.613,32,2.467,33,4.836,34,3.663,35,2.467,36,3.084,37,3.663,38,4.071,39,3.663,40,3.663,41,1.458,42,3.663,43,3.663,44,2.467,45,3.663,46,2.467,47,3.679,48,4.836,49,3.663,50,3.084,51,1.839,52,0.342,53,3.663,54,1.475,55,0.275,56,0.982,57,1.058,58,1.058,59,2.884,60,2.467,61,2.467,62,0.193,63,0.01,64,0.912,65,0.79,66,2.467,67,1.503,68,2.467,69,2.467,70,2.467,71,1.475,72,0.015,73,0.015]],["title/injectables/AdminService.html",[59,2.19,74,0.585]],["body/injectables/AdminService.html",[3,0.202,4,0.202,5,0.176,9,0.288,10,0.978,11,2.55,12,3.192,13,4.164,15,3.192,16,1.787,18,0.028,20,0.615,25,0.717,26,0.667,27,0.351,28,0.717,29,2.176,30,0.978,31,2.267,36,2.176,52,0.297,55,0.288,59,2.502,62,0.202,63,0.011,64,0.956,65,0.827,67,1.701,72,0.016,73,0.016,74,0.668,75,0.956,76,2.176,77,2.584,78,2.584,79,1.402,80,1.545,81,2.644,82,2.176,83,2.176,84,2.176,85,1.197,86,1.297,87,2.584,88,2.584,89,2.584,90,2.584,91,2.584,92,2.584,93,2.584,94,2.176,95,3.791,96,2.797,97,2.584,98,2.584,99,2.584,100,2.584,101,2.584,102,2.584,103,3.791,104,2.584,105,2.584,106,1.907,107,2.584,108,2.584,109,2.584,110,2.584,111,2.584,112,1.907,113,2.685,114,2.584,115,2.584]],["title/controllers/AppController.html",[0,1.062,116,2.19]],["body/controllers/AppController.html",[0,1.529,2,1.237,3,0.282,4,0.282,5,0.245,9,0.401,10,1.233,11,2.833,17,1.766,18,0.028,20,0.774,30,1.233,52,0.374,55,0.401,62,0.282,63,0.015,64,1.329,65,1.151,67,1.643,72,0.02,73,0.02,116,3.152,117,3.027,118,5.714,119,5.714,120,4.775,121,3.595,122,5.714,123,4.775,124,3.595,125,2.93,126,3.027,127,4.775]],["title/modules/AppModule.html",[128,1.141,129,2.19]],["body/modules/AppModule.html",[2,1.263,3,0.194,4,0.194,5,0.168,10,0.639,18,0.028,20,0.401,25,0.687,26,0.639,27,0.336,28,0.687,30,0.639,52,0.476,55,0.276,62,0.194,63,0.01,72,0.015,73,0.015,116,2.889,125,2.96,126,2.084,128,1.263,129,4.202,130,1.061,131,1.575,132,2.084,133,2.084,134,2.084,135,3.241,136,3.241,137,3.241,138,3.241,139,3.241,140,1.843,141,1.242,142,1.147,143,2.475,144,2.006,145,3.091,146,2.475,147,3.672,148,4.843,149,2.475,150,2.475,151,1.826,152,3.672,153,2.475,154,2.084,155,1.48,156,2.475,157,1.634,158,2.475,159,2.475,160,1.634,161,2.475,162,1.634,163,2.084,164,2.475,165,2.475,166,2.475,167,2.475,168,2.475,169,2.475,170,1.634,171,2.475,172,1.826,173,2.475,174,2.084,175,2.475,176,2.475]],["title/injectables/AppService.html",[74,0.585,125,1.813]],["body/injectables/AppService.html",[3,0.374,4,0.374,5,0.324,18,0.027,52,0.374,55,0.532,62,0.374,63,0.02,72,0.023,73,0.023,74,1.006,75,1.763,125,3.119,177,4.015]],["title/modules/EmailModule.html",[128,1.141,178,2.19]],["body/modules/EmailModule.html",[2,1.305,3,0.297,4,0.297,5,0.258,18,0.027,52,0.431,55,0.423,62,0.297,63,0.016,72,0.02,73,0.02,128,1.702,130,1.628,131,2.123,140,2.485,141,1.905,142,1.758,144,2.704,145,3.195,154,4.167,155,2.269,178,4.173,179,3.195,180,3.195,181,3.195,182,3.328,183,3.795,184,4.167,185,3.195]],["title/classes/EmailScheduleDto.html",[63,0.014,186,1.984]],["body/classes/EmailScheduleDto.html",[3,0.26,4,0.26,5,0.226,9,0.37,16,2.476,17,2.045,18,0.027,20,0.897,27,0.751,41,1.32,52,0.26,62,0.354,63,0.019,72,0.019,73,0.019,170,2.987,186,3.079,187,1.666,188,2.906,189,2.793,190,1.801,191,4.335,192,3.399,193,4.335,194,3.399,195,3.338,196,3.318,197,5.149,198,3.318,199,5.149,200,3.809,201,3.318,202,3.318,203,3.399,204,3.399,205,1.984]],["title/controllers/EmailSchedulingController.html",[0,1.062,206,2.448]],["body/controllers/EmailSchedulingController.html",[0,1.141,2,1.226,3,0.279,4,0.279,5,0.242,7,2.131,9,0.397,10,1.225,11,2.474,17,1.318,18,0.027,20,0.578,25,0.989,26,0.92,27,0.484,28,0.989,30,0.92,41,1.418,52,0.418,54,2.131,55,0.397,62,0.279,63,0.015,65,1.141,72,0.019,73,0.019,186,3.405,188,2.384,206,3.503,207,3,208,3.524,209,4.748,210,3.997,211,3,212,4.748,213,3.564,214,3.997,215,2.131,216,3,217,2.474,218,2.352,219,3.564,220,1.947,221,1.651,222,3.564,223,3.564,224,3.564]],["title/injectables/EmailSchedulingService.html",[74,0.585,217,1.537]],["body/injectables/EmailSchedulingService.html",[3,0.209,4,0.209,5,0.182,9,0.298,10,1.002,18,0.028,20,0.629,25,0.74,26,0.689,27,0.362,28,0.74,30,1.002,41,1.062,52,0.436,55,0.298,56,1.062,57,1.145,58,1.145,62,0.209,63,0.011,65,1.243,72,0.016,73,0.016,74,0.684,75,0.987,81,2.296,85,1.236,151,2.863,157,1.761,182,2.296,185,2.247,186,3.003,188,2.296,192,1.761,194,2.562,208,1.761,210,3.267,211,3.267,214,2.247,216,2.247,217,1.798,220,1.458,221,1.798,225,2.247,226,5.021,227,2.668,228,2.668,229,3.85,230,2.247,231,2.668,232,2.247,233,1.798,234,2.668,235,3.881,236,2.668,237,2.668,238,2.247,239,3.881,240,3.881,241,4.573,242,3.881,243,3.881,244,2.668,245,2.668,246,1.969,247,2.668,248,4.573,249,2.668,250,2.668,251,2.668]],["title/injectables/EmailService.html",[74,0.585,182,1.666]],["body/injectables/EmailService.html",[3,0.258,4,0.258,5,0.224,9,0.367,10,1.161,18,0.028,20,0.73,23,1.652,25,0.913,26,0.849,27,0.611,28,0.913,30,0.849,41,1.31,52,0.432,55,0.367,62,0.258,63,0.013,64,1.217,65,1.054,67,1.132,72,0.018,73,0.018,74,0.793,75,1.217,85,1.525,155,1.968,162,2.172,182,2.259,190,1.791,221,2.376,238,4.317,252,2.771,253,5.127,254,4.5,255,4.5,256,5.127,257,3.291,258,2.428,259,3.291,260,4.317,261,4.5,262,2.771,263,3.291,264,3.291,265,3.291,266,3.291,267,3.291,268,3.291,269,3.291,270,3.291]],["title/interfaces/Error.html",[113,1.984,271,1.984]],["body/interfaces/Error.html",[3,0.313,4,0.313,5,0.272,9,0.446,16,2.505,18,0.027,27,0.695,52,0.313,55,0.446,62,0.313,63,0.016,72,0.021,73,0.021,113,3.827,190,2.037,271,2.391,272,3.999,273,2.951,274,3.929,275,3.777,276,2.391,277,3.367,278,3.367,279,2.951,280,3.367]],["title/modules/FirebaseModule.html",[128,1.141,135,1.984]],["body/modules/FirebaseModule.html",[3,0.304,4,0.304,5,0.264,18,0.027,52,0.394,55,0.433,62,0.304,63,0.016,72,0.021,73,0.021,79,2.459,128,1.729,130,1.666,131,2.155,135,3.801,140,2.523,141,1.951,142,1.8,144,2.745,184,4.231,281,3.271,282,3.271,283,3.271,284,3.885,285,5.025,286,3.271]],["title/injectables/FirebaseService.html",[74,0.585,79,1.227]],["body/injectables/FirebaseService.html",[3,0.192,4,0.192,5,0.167,8,1.231,9,0.273,16,1.451,18,0.028,20,0.876,24,2.407,27,0.333,41,2.051,52,0.378,55,0.273,56,0.976,57,1.052,58,1.052,62,0.192,63,0.01,64,0.907,67,1.773,72,0.015,73,0.015,74,0.643,75,0.907,79,1.349,85,1.136,86,2.186,155,1.467,190,1.451,221,2.017,233,1.69,260,4.059,287,2.065,288,4.354,289,2.379,290,4.354,291,4.354,292,4.354,293,3.802,294,2.452,295,3.647,296,2.452,297,2.452,298,2.452,299,2.452,300,2.452,301,2.691,302,2.065,303,2.452,304,1.81,305,2.452,306,2.452,307,2.452,308,2.452,309,2.452,310,2.452,311,2.452,312,2.452,313,2.452,314,2.452,315,2.452,316,2.452,317,2.452,318,2.452,319,2.065,320,2.452,321,2.452,322,2.452,323,2.452,324,2.452,325,2.407,326,2.452,327,3.647,328,2.452]],["title/classes/NotifyDto.html",[63,0.014,329,1.984]],["body/classes/NotifyDto.html",[3,0.252,4,0.252,5,0.219,8,1.613,9,0.358,16,2.457,17,2.116,18,0.027,20,0.928,27,0.777,41,1.279,51,1.613,52,0.252,62,0.252,63,0.018,72,0.018,73,0.018,187,1.613,190,1.762,194,3.343,195,4.026,203,3.778,204,3.778,205,1.922,289,1.756,325,3.343,329,3.028,330,2.706,331,4.263,332,4.263,333,3.028,334,3.214,335,4.427,336,5.064,337,3.214,338,3.214,339,3.214,340,3.214,341,2.371,342,2.121]],["title/injectables/PreAuthMiddleware.html",[74,0.585,160,2.19]],["body/injectables/PreAuthMiddleware.html",[3,0.174,4,0.174,5,0.151,8,1.117,9,0.248,10,0.875,16,1.634,18,0.028,20,0.744,24,2.238,25,1.139,26,1.06,27,0.671,28,1.139,30,0.875,38,1.874,52,0.36,55,0.248,62,0.174,63,0.009,64,0.823,71,1.331,72,0.014,73,0.014,74,0.597,75,0.823,79,1.698,81,1.117,86,1.702,112,1.642,151,3.388,160,2.238,162,3.773,163,1.874,172,1.642,174,1.874,190,1.349,208,1.469,220,1.216,221,2.412,233,1.031,274,1.469,286,1.874,319,2.854,333,2.456,343,4.16,344,1.874,345,4.106,346,3.39,347,3.39,348,2.226,349,3.39,350,3.39,351,5.58,352,4.558,353,2.226,354,3.39,355,3.39,356,4.591,357,4.591,358,2.226,359,2.226,360,1.874,361,3.39,362,1.874,363,3.39,364,2.226,365,2.226,366,2.226,367,2.226,368,4.106,369,2.226,370,2.226,371,2.226,372,2.226,373,2.226,374,3.39,375,2.226,376,1.874,377,2.226,378,2.226,379,2.226]],["title/controllers/RestaurantsController.html",[0,1.062,380,2.19]],["body/controllers/RestaurantsController.html",[0,1.126,2,1.21,3,0.276,4,0.276,5,0.239,7,2.104,9,0.392,10,1.215,11,2.458,17,1.301,18,0.027,20,0.57,25,0.976,26,0.908,27,0.478,28,0.976,30,0.908,31,2.104,52,0.444,54,2.104,55,0.392,62,0.276,63,0.014,65,1.507,67,1.21,72,0.019,73,0.019,188,1.766,215,2.104,217,2.458,218,2.322,220,1.922,221,2.181,329,3.387,380,3.107,381,2.962,382,3.518,383,4.707,384,3.518,385,4.707,386,3.518,387,4.707,388,2.962,389,2.898,390,2.962,391,3.518,392,3.518,393,3.518]],["title/modules/RestaurantsModule.html",[128,1.141,136,1.984]],["body/modules/RestaurantsModule.html",[2,1.633,3,0.279,4,0.279,5,0.242,18,0.027,52,0.465,55,0.397,62,0.279,63,0.015,72,0.019,73,0.019,128,1.633,130,1.528,131,2.036,136,3.867,140,2.384,141,1.789,142,1.651,144,2.594,182,3.062,188,1.789,217,2.826,218,2.352,380,3.524,389,3.332,390,3,394,3,395,3,396,3.564,397,3.564,398,3.564]],["title/injectables/RestaurantsService.html",[74,0.585,389,1.813]],["body/injectables/RestaurantsService.html",[3,0.175,4,0.175,5,0.152,9,0.25,10,0.879,11,1.909,18,0.028,20,0.363,25,0.621,26,0.578,27,0.304,28,0.621,30,0.578,31,1.338,50,1.884,52,0.388,55,0.25,56,0.891,57,0.96,58,0.96,62,0.175,63,0.009,65,1.09,67,0.77,71,1.338,72,0.014,73,0.014,74,0.6,75,0.828,79,1.259,80,1.338,81,2.723,82,2.866,83,1.884,84,1.884,85,1.037,86,1.123,96,1.651,142,1.037,188,1.123,191,3.469,192,1.477,193,3.877,194,2.247,200,1.884,208,1.477,217,1.909,218,1.477,220,1.223,221,1.577,230,1.884,233,2.133,246,1.651,275,2.512,302,1.884,325,1.477,329,2.753,331,1.884,332,1.884,333,1.338,342,1.477,388,1.884,389,1.86,399,1.884,400,3.404,401,3.404,402,2.238,403,2.512,404,2.238,405,2.238,406,2.238,407,2.238,408,3.404,409,4.12,410,2.238,411,2.238,412,2.238,413,2.238,414,2.238,415,2.238,416,2.238,417,2.238,418,2.238,419,2.238,420,2.238,421,2.238,422,2.238,423,2.238,424,2.238,425,2.238,426,2.238,427,2.238,428,4.604,429,2.238,430,2.238,431,2.238,432,2.238,433,2.238,434,2.238,435,2.238,436,2.238,437,2.238,438,1.884,439,2.238,440,2.238,441,2.238,442,2.238,443,2.238,444,2.238,445,2.238,446,2.238,447,2.238,448,2.238,449,2.238,450,2.238]],["title/controllers/SupportController.html",[0,1.062,451,2.19]],["body/controllers/SupportController.html",[0,1.041,2,1.119,3,0.255,4,0.255,5,0.221,7,1.945,9,0.363,10,1.152,17,1.65,18,0.027,20,0.724,23,1.633,25,1.238,26,1.152,27,0.606,28,1.238,30,1.152,51,1.633,52,0.43,54,1.945,55,0.363,62,0.255,63,0.013,64,1.203,65,1.041,67,1.535,72,0.018,73,0.018,215,1.945,403,4.046,451,2.946,452,2.738,453,2.738,454,3.758,455,3.758,456,2.738,457,3.279,458,4.463,459,3.252,460,2.738,461,3.279,462,4.463,463,3.252,464,3.758,465,3.758,466,2.784,467,2.738,468,3.252,469,3.252,470,3.252,471,3.252,472,3.252]],["title/modules/SupportModule.html",[128,1.141,137,1.984]],["body/modules/SupportModule.html",[2,1.75,3,0.31,4,0.31,5,0.269,18,0.027,52,0.44,55,0.442,62,0.31,63,0.016,72,0.021,73,0.021,128,1.75,130,1.699,131,2.182,137,3.754,140,2.554,141,1.988,142,1.835,144,2.779,451,3.71,466,3.43,467,3.334,473,3.334,474,3.334,475,3.96,476,3.96]],["title/injectables/SupportService.html",[74,0.585,466,1.813]],["body/injectables/SupportService.html",[3,0.184,4,0.184,5,0.24,9,0.262,10,0.911,11,1.965,18,0.028,20,0.688,23,1.178,25,0.979,26,0.911,27,0.479,28,0.979,30,1.095,31,1.403,51,1.178,52,0.416,55,0.262,56,0.934,57,1.007,58,1.007,62,0.184,63,0.01,64,0.868,65,0.751,67,1.623,71,2.11,72,0.014,73,0.014,74,0.622,75,0.868,79,1.305,80,1.403,81,2.539,85,1.087,86,1.178,96,2.604,170,1.549,233,1.087,246,1.732,274,1.549,289,1.282,301,1.732,304,1.732,403,2.604,454,2.971,455,2.971,456,2.971,457,2.821,460,2.971,461,2.821,464,2.971,465,2.971,466,1.928,477,1.976,478,4.717,479,2.347,480,2.347,481,2.347,482,4.241,483,2.347,484,1.976,485,2.347,486,2.347,487,2.347,488,2.347,489,2.347,490,4.241,491,2.347,492,4.717,493,3.529,494,4.241,495,2.347,496,3.529,497,2.347,498,3.529,499,2.347,500,2.347,501,3.529,502,2.347,503,2.347,504,2.347,505,2.347,506,2.347,507,1.732,508,2.347,509,2.347,510,1.976]],["title/controllers/SyncsController.html",[0,1.062,511,2.19]],["body/controllers/SyncsController.html",[0,1.182,2,1.27,3,0.289,4,0.289,5,0.251,7,2.208,9,0.412,10,1.255,17,1.365,18,0.028,20,0.599,25,1.024,26,0.953,27,0.501,28,1.024,30,0.953,52,0.426,54,2.208,55,0.412,62,0.289,63,0.015,64,1.365,65,1.182,67,1.27,72,0.02,73,0.02,215,3.249,511,3.208,512,3.109,513,3.692,514,4.092,515,3.109,516,4.427,517,4.861,518,3.692,519,3.109,520,2.969,521,3.109,522,3.692,523,3.692,524,3.692]],["title/modules/SyncsModule.html",[128,1.141,138,1.984]],["body/modules/SyncsModule.html",[2,1.75,3,0.31,4,0.31,5,0.269,18,0.027,52,0.44,55,0.442,62,0.31,63,0.016,72,0.021,73,0.021,128,1.75,130,1.699,131,2.182,138,3.754,140,2.554,141,1.988,142,1.835,144,2.779,511,3.71,520,3.43,521,3.334,525,3.334,526,3.334,527,3.96,528,3.96]],["title/injectables/SyncsService.html",[74,0.585,520,1.813]],["body/injectables/SyncsService.html",[3,0.221,4,0.221,5,0.192,9,0.314,10,1.041,18,0.028,20,0.457,23,2.025,25,0.781,26,0.727,27,0.548,28,0.781,30,0.727,47,2.37,52,0.403,55,0.314,56,1.12,57,1.208,58,1.208,62,0.221,63,0.012,64,1.041,65,0.901,67,0.969,71,1.684,72,0.017,73,0.017,74,0.711,75,1.041,79,1.492,80,1.684,81,2.366,85,1.304,86,1.413,94,2.37,170,1.858,215,3.078,233,1.304,289,1.538,301,2.077,304,2.077,376,4.334,438,2.37,510,2.37,514,3.396,515,3.396,516,4.02,519,2.37,520,2.204,529,2.37,530,2.815,531,2.815,532,2.815,533,2.815,534,2.815,535,2.815,536,4.034,537,2.815,538,4.034,539,2.37,540,2.815,541,2.815,542,2.37,543,4.034,544,2.815,545,2.815,546,2.815,547,2.815,548,2.815,549,2.815,550,2.815]],["title/injectables/TasksService.html",[74,0.585,139,1.984]],["body/injectables/TasksService.html",[3,0.259,4,0.259,5,0.225,9,0.369,10,1.165,11,2.381,17,1.222,18,0.028,20,0.833,27,0.449,30,0.853,41,1.315,52,0.402,55,0.369,62,0.259,63,0.014,64,1.222,65,1.645,72,0.018,73,0.018,74,0.795,75,1.222,79,1.669,80,1.976,85,1.531,86,1.659,139,2.698,157,2.181,190,1.796,221,2.764,229,5.023,232,2.782,233,2.091,293,2.438,551,2.782,552,5.521,553,5.521,554,4.512,555,3.304,556,4.512,557,3.304,558,3.304,559,3.304,560,3.304]],["title/classes/UpdateRestaurantTicketDto.html",[63,0.014,457,1.984]],["body/classes/UpdateRestaurantTicketDto.html",[3,0.219,4,0.219,5,0.19,8,1.404,9,0.312,16,2.251,17,2.009,18,0.028,20,0.881,27,0.697,41,1.113,51,2.925,52,0.314,56,1.113,57,1.199,58,1.199,62,0.219,63,0.016,72,0.016,73,0.016,106,2.962,187,1.404,190,1.597,195,3.465,203,3.387,204,3.734,205,1.672,258,2.063,289,2.565,325,3.1,333,2.808,341,2.063,342,1.846,457,2.808,507,2.962,561,4.173,562,2.063,563,3.953,564,3.953,565,3.953,566,2.796,567,3.38,568,3.953,569,2.796,570,2.796,571,2.354,572,3.38,573,3.38,574,2.796,575,2.354,576,2.354,577,2.354,578,2.354,579,2.354,580,2.354]],["title/classes/UpdateUserTicketDto.html",[63,0.014,461,1.984]],["body/classes/UpdateUserTicketDto.html",[3,0.206,4,0.206,5,0.179,8,1.318,9,0.293,16,1.983,17,1.96,18,0.027,20,0.859,23,2.779,27,0.776,41,1.045,51,1.318,52,0.3,56,1.045,57,1.126,58,1.126,62,0.206,63,0.016,72,0.016,73,0.016,106,2.83,187,1.318,190,1.526,203,2.991,204,3.499,205,1.57,258,1.937,289,2.475,333,2.71,341,1.937,342,1.733,461,2.71,507,2.83,561,4.084,562,1.937,563,3.815,564,3.815,565,3.815,567,3.229,568,3.229,571,2.211,572,3.229,573,3.229,575,2.211,576,2.211,577,2.211,578,2.211,579,2.211,580,2.211,581,2.626,582,3.835,583,3.835,584,3.835,585,2.626,586,2.626,587,2.626,588,3.835,589,2.626,590,4.531,591,2.626,592,3.835,593,3.835,594,3.835,595,2.626,596,2.626,597,4.983,598,2.626,599,2.626]],["title/classes/ValidationException.html",[63,0.014,276,1.984]],["body/classes/ValidationException.html",[3,0.3,4,0.3,5,0.261,9,0.427,16,1.981,18,0.027,20,0.807,25,1.063,26,0.989,27,0.676,28,1.063,52,0.3,55,0.427,62,0.3,63,0.016,72,0.02,73,0.02,113,3.721,187,1.923,190,1.981,220,2.093,271,2.291,273,2.826,274,2.529,275,4.082,276,2.977,277,4.192,278,3.225,279,4.321,280,3.225,600,4.979,601,3.831,602,3.831,603,3.831]],["title/classes/ValidationFilter.html",[63,0.014,604,2.448]],["body/classes/ValidationFilter.html",[3,0.28,4,0.28,5,0.243,9,0.399,10,1.229,18,0.027,20,0.58,25,0.993,26,0.924,27,0.486,28,0.993,30,0.924,52,0.373,55,0.399,62,0.28,63,0.015,67,1.231,72,0.02,73,0.02,81,2.391,112,3.948,172,3.513,187,1.797,276,3.411,279,2.641,352,3.013,604,3.948,605,3.013,606,5.351,607,4.762,608,5.351,609,5.704,610,3.579,611,3.579,612,3.579,613,3.579,614,3.579,615,3.579,616,3.579,617,3.579,618,3.579,619,3.579,620,3.579,621,3.579]],["title/coverage.html",[622,3.339]],["body/coverage.html",[0,1.76,1,1.901,5,0.175,6,2.169,18,0.027,23,1.293,27,0.35,51,1.293,59,1.7,63,0.023,72,0.015,73,0.015,74,1.065,76,2.169,79,0.953,113,1.541,116,1.7,117,2.169,125,1.407,139,1.541,160,1.7,162,1.7,177,2.169,182,1.293,186,1.541,188,2.25,189,2.169,206,1.901,207,2.169,217,1.194,225,2.169,233,1.194,252,2.169,271,1.541,273,2.791,276,1.541,287,2.169,329,1.541,330,2.169,343,2.169,344,2.169,360,2.169,380,1.7,381,2.169,389,1.407,399,2.169,451,1.7,452,2.169,457,1.541,461,1.541,466,1.407,477,2.169,511,1.7,512,2.169,520,1.407,529,2.169,551,2.169,561,2.791,562,2.791,604,1.901,605,2.169,622,1.901,623,2.169,624,2.576,625,2.576,626,2.576,627,2.576,628,6.561,629,5.682,630,3.782,631,5.498,632,3.782,633,2.576,634,2.169,635,2.169,636,2.576,637,3.782,638,3.782,639,3.782,640,2.576,641,2.576]],["title/dependencies.html",[131,1.711,642,2.773]],["body/dependencies.html",[8,1.905,18,0.028,24,2.505,55,0.423,56,1.51,57,1.628,58,1.628,63,0.02,72,0.02,73,0.02,131,1.628,155,2.269,157,2.505,192,2.505,205,2.269,262,3.195,362,3.195,484,3.195,643,3.795,644,3.795,645,5.507,646,3.795,647,3.795,648,3.795,649,3.795,650,3.795,651,3.795,652,3.795,653,3.795,654,3.795,655,3.795,656,3.795,657,3.795,658,3.795,659,3.795,660,3.795,661,3.795,662,3.795,663,3.795,664,3.795,665,3.795,666,3.795,667,3.795]],["title/miscellaneous/enumerations.html",[668,1.515,669,3.359]],["body/miscellaneous/enumerations.html",[9,0.511,18,0.027,72,0.023,73,0.023,293,4.61,539,4.692,542,4.692,668,2.503,669,3.857,670,5.572,671,3.857,672,3.857,673,5.572,674,5.572]],["title/miscellaneous/functions.html",[668,1.515,675,3.359]],["body/miscellaneous/functions.html",[9,0.558,18,0.024,72,0.024,73,0.024,634,4.211,635,5.249,668,2.732,675,4.211,676,5.002]],["title/index.html",[9,0.309,677,2.773,678,2.773]],["body/index.html",[18,0.027,26,0.984,56,1.975,72,0.02,73,0.02,622,2.813,623,3.21,679,4.964,680,3.813,681,3.813,682,4.964,683,4.964,684,4.964,685,3.813,686,3.813,687,3.813,688,3.813,689,3.813,690,3.813,691,6.215,692,6.215,693,3.813,694,4.964,695,3.813,696,3.813,697,3.813,698,3.813,699,4.964,700,4.964,701,3.813,702,3.813,703,3.813]],["title/modules.html",[130,1.941]],["body/modules.html",[18,0.022,72,0.022,73,0.022,129,2.894,130,1.881,135,2.622,136,2.622,137,2.622,138,2.622,178,2.894,453,5.425,704,6.443,705,6.443,706,6.443]],["title/overview.html",[707,3.81]],["body/overview.html",[2,1.007,18,0.027,72,0.017,73,0.017,75,1.082,79,2.183,125,2.631,129,4.259,130,1.255,131,1.778,132,2.464,133,2.464,134,2.464,135,3.434,136,3.669,137,3.307,138,3.307,139,2.88,140,2.082,141,1.469,142,1.356,178,3.65,179,2.464,180,2.464,181,2.464,182,3.029,187,1.469,217,2.231,271,1.75,281,2.464,282,2.464,283,2.464,389,2.631,394,2.464,395,2.464,466,2.631,473,2.464,474,2.464,520,2.631,525,2.464,526,2.464,707,2.464,708,4.815,709,2.926,710,2.926]],["title/miscellaneous/typealiases.html",[668,1.515,711,3.99]],["body/miscellaneous/typealiases.html",[9,0.548,18,0.024,27,0.667,72,0.024,73,0.024,516,4.287,668,2.683,671,4.892,672,4.135,712,4.911,713,5.81]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":628,"title":{},"body":{"coverage.html":{}}}],["0.1.13",{"_index":663,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":653,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":652,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":630,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":631,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":629,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":639,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":632,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":636,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":633,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":710,"title":{},"body":{"overview.html":{}}}],["1.0.1",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["1.0.2",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["1.1.16",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["1.39.0",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["1/6",{"_index":638,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":709,"title":{},"body":{"overview.html":{}}}],["10.0.0",{"_index":656,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":93,"title":{},"body":{"injectables/AdminService.html":{}}}],["1000",{"_index":84,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RestaurantsService.html":{}}}],["16",{"_index":637,"title":{},"body":{"coverage.html":{}}}],["2.1.1",{"_index":659,"title":{},"body":{"dependencies.html":{}}}],["2.26.0",{"_index":655,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":665,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":627,"title":{},"body":{"coverage.html":{}}}],["4.17.21",{"_index":657,"title":{},"body":{"dependencies.html":{}}}],["400",{"_index":619,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["5",{"_index":408,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["6",{"_index":708,"title":{},"body":{"overview.html":{}}}],["6.7.1",{"_index":660,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":83,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RestaurantsService.html":{}}}],["7.2.0",{"_index":667,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":626,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["access",{"_index":378,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["accessdenied",{"_index":346,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["accessdenied(url",{"_index":350,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["actually",{"_index":500,"title":{},"body":{"injectables/SupportService.html":{}}}],["admin",{"_index":8,"title":{},"body":{"controllers/AdminController.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"dependencies.html":{}}}],["admin.service",{"_index":60,"title":{},"body":{"controllers/AdminController.html":{}}}],["admincontroller",{"_index":1,"title":{"controllers/AdminController.html":{}},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["adminservice",{"_index":59,"title":{"injectables/AdminService.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"coverage.html":{}}}],["aliases",{"_index":712,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["anything",{"_index":502,"title":{},"body":{"injectables/SupportService.html":{}}}],["app",{"_index":689,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":158,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":126,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":116,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":129,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approved",{"_index":447,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["appservice",{"_index":125,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argumentshost",{"_index":609,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["async",{"_index":11,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/TasksService.html":{}}}],["auth",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"coverage.html":{}}}],["available",{"_index":578,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["await",{"_index":96,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{}}}],["backend",{"_index":679,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":275,"title":{},"body":{"interfaces/Error.html":{},"injectables/RestaurantsService.html":{},"classes/ValidationException.html":{}}}],["badrequestexception('template",{"_index":446,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["bash",{"_index":686,"title":{},"body":{"index.html":{}}}],["below",{"_index":577,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["bob",{"_index":89,"title":{},"body":{"injectables/AdminService.html":{}}}],["body",{"_index":215,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{}}}],["body.anonymousid",{"_index":533,"title":{},"body":{"injectables/SyncsService.html":{}}}],["body.type",{"_index":538,"title":{},"body":{"injectables/SyncsService.html":{}}}],["body.userid",{"_index":532,"title":{},"body":{"injectables/SyncsService.html":{}}}],["boolean",{"_index":567,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["boolean(body.userid",{"_index":537,"title":{},"body":{"injectables/SyncsService.html":{}}}],["bootstrap",{"_index":635,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":706,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":704,"title":{},"body":{"modules.html":{}}}],["bug",{"_index":593,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["cancelallscheduledemails",{"_index":226,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cat",{"_index":90,"title":{},"body":{"injectables/AdminService.html":{}}}],["catch",{"_index":112,"title":{},"body":{"injectables/AdminService.html":{},"injectables/PreAuthMiddleware.html":{},"classes/ValidationFilter.html":{}}}],["catch(exception",{"_index":607,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["catch(validationexception",{"_index":613,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["changed",{"_index":501,"title":{},"body":{"injectables/SupportService.html":{}}}],["claim",{"_index":49,"title":{},"body":{"controllers/AdminController.html":{}}}],["class",{"_index":63,"title":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":187,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"overview.html":{}}}],["clientemail",{"_index":310,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["cluster_appmodule",{"_index":132,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":134,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":133,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":179,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":181,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":180,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_firebasemodule",{"_index":281,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_exports",{"_index":283,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_firebasemodule_providers",{"_index":282,"title":{},"body":{"modules/FirebaseModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule",{"_index":394,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_restaurantsmodule_providers",{"_index":395,"title":{},"body":{"modules/RestaurantsModule.html":{},"overview.html":{}}}],["cluster_supportmodule",{"_index":473,"title":{},"body":{"modules/SupportModule.html":{},"overview.html":{}}}],["cluster_supportmodule_providers",{"_index":474,"title":{},"body":{"modules/SupportModule.html":{},"overview.html":{}}}],["cluster_syncsmodule",{"_index":525,"title":{},"body":{"modules/SyncsModule.html":{},"overview.html":{}}}],["cluster_syncsmodule_providers",{"_index":526,"title":{},"body":{"modules/SyncsModule.html":{},"overview.html":{}}}],["collection",{"_index":321,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["compodoc/compodoc",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["configmodule",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{}}}],["configmodule.forroot",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":260,"title":{},"body":{"injectables/EmailService.html":{},"injectables/FirebaseService.html":{}}}],["configservice.get('email_password",{"_index":269,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_service",{"_index":266,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('email_user",{"_index":267,"title":{},"body":{"injectables/EmailService.html":{}}}],["configservice.get('firebase_client_email",{"_index":311,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["configservice.get('firebase_database_url",{"_index":317,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["configservice.get('firebase_project_id",{"_index":309,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["configure",{"_index":146,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":147,"title":{},"body":{"modules/AppModule.html":{}}}],["console.log('nothing",{"_index":504,"title":{},"body":{"injectables/SupportService.html":{}}}],["console.log('pre",{"_index":373,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["console.log('sending",{"_index":237,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["const",{"_index":81,"title":{},"body":{"injectables/AdminService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/ValidationFilter.html":{}}}],["constructor",{"_index":220,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"classes/ValidationException.html":{}}}],["constructor(firebaseapp",{"_index":348,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["constructor(private",{"_index":64,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}}}],["constructor(public",{"_index":278,"title":{},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{}}}],["constructor(validationerrors",{"_index":601,"title":{},"body":{"classes/ValidationException.html":{}}}],["consumer",{"_index":150,"title":{},"body":{"modules/AppModule.html":{}}}],["consumer.apply(preauthmiddleware).forroutes",{"_index":173,"title":{},"body":{"modules/AppModule.html":{}}}],["content",{"_index":191,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/RestaurantsService.html":{}}}],["content's",{"_index":430,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["context",{"_index":614,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["context.getresponse",{"_index":616,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["controller",{"_index":0,"title":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{}},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{},"coverage.html":{}}}],["controller('admin",{"_index":61,"title":{},"body":{"controllers/AdminController.html":{}}}],["controller('email",{"_index":219,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["controller('restaurants",{"_index":391,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["controller('support",{"_index":468,"title":{},"body":{"controllers/SupportController.html":{}}}],["controller('syncs",{"_index":522,"title":{},"body":{"controllers/SyncsController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"overview.html":{}}}],["corresponding",{"_index":572,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["coverage",{"_index":622,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdby",{"_index":620,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["createtransport",{"_index":261,"title":{},"body":{"injectables/EmailService.html":{}}}],["credential",{"_index":306,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["critical",{"_index":505,"title":{},"body":{"injectables/SupportService.html":{}}}],["cron",{"_index":232,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/TasksService.html":{}}}],["cron(cronexpression.every_30_seconds",{"_index":554,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronexpression",{"_index":559,"title":{},"body":{"injectables/TasksService.html":{}}}],["cronjob",{"_index":231,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["cronjob(date",{"_index":236,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["dan",{"_index":88,"title":{},"body":{"injectables/AdminService.html":{}}}],["daniel",{"_index":435,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["data",{"_index":403,"title":{},"body":{"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["data.priority",{"_index":493,"title":{},"body":{"injectables/SupportService.html":{}}}],["data.resolved",{"_index":496,"title":{},"body":{"injectables/SupportService.html":{}}}],["data.type",{"_index":498,"title":{},"body":{"injectables/SupportService.html":{}}}],["databaseurl",{"_index":316,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["date",{"_index":192,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"injectables/RestaurantsService.html":{},"dependencies.html":{}}}],["date().toisostring",{"_index":377,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["date(body.timestamp).gettime",{"_index":534,"title":{},"body":{"injectables/SyncsService.html":{}}}],["date(emailschedule.date",{"_index":234,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["date(schedulefor).toutcstring",{"_index":450,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["date.now",{"_index":246,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{}}}],["db",{"_index":288,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["db(firestorecollection.events",{"_index":549,"title":{},"body":{"injectables/SyncsService.html":{}}}],["db(firestorecollection.support_users",{"_index":486,"title":{},"body":{"injectables/SupportService.html":{}}}],["db(firestorecollection.users",{"_index":97,"title":{},"body":{"injectables/AdminService.html":{}}}],["decodedtoken",{"_index":368,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["decodedtoken.email",{"_index":370,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["decodedtoken.roles",{"_index":371,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["decodedtoken.type",{"_index":372,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["decorators",{"_index":17,"title":{},"body":{"controllers/AdminController.html":{},"controllers/AppController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"classes/NotifyDto.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["default",{"_index":41,"title":{},"body":{"controllers/AdminController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["defined",{"_index":20,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["denied",{"_index":379,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["dependencies",{"_index":131,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{},"dependencies.html":{},"overview.html":{}}}],["desc",{"_index":100,"title":{},"body":{"injectables/AdminService.html":{}}}],["development",{"_index":690,"title":{},"body":{"index.html":{}}}],["different",{"_index":441,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["dlog",{"_index":230,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/RestaurantsService.html":{}}}],["dlog('emailschedule.service",{"_index":239,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["dlog('restaurants.service",{"_index":427,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["doc(data.ticketid",{"_index":487,"title":{},"body":{"injectables/SupportService.html":{}}}],["doc(documentid",{"_index":550,"title":{},"body":{"injectables/SyncsService.html":{}}}],["doc.data",{"_index":108,"title":{},"body":{"injectables/AdminService.html":{}}}],["doc.id",{"_index":107,"title":{},"body":{"injectables/AdminService.html":{}}}],["documentation",{"_index":623,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documentation:serverunning",{"_index":688,"title":{},"body":{"index.html":{}}}],["documentid",{"_index":531,"title":{},"body":{"injectables/SyncsService.html":{}}}],["dto/notify.dto",{"_index":388,"title":{},"body":{"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{}}}],["dto/update",{"_index":464,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["e2e",{"_index":701,"title":{},"body":{"index.html":{}}}],["each",{"_index":200,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/RestaurantsService.html":{}}}],["eaters",{"_index":42,"title":{},"body":{"controllers/AdminController.html":{}}}],["eg",{"_index":50,"title":{},"body":{"controllers/AdminController.html":{},"injectables/RestaurantsService.html":{}}}],["email",{"_index":208,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{}}}],["email.service",{"_index":185,"title":{},"body":{"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailmodule",{"_index":178,"title":{"modules/EmailModule.html":{}},"body":{"modules/EmailModule.html":{},"modules.html":{},"overview.html":{}}}],["emailschedule",{"_index":214,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["emailschedule.content",{"_index":243,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.recipients",{"_index":240,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailschedule.subject",{"_index":241,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["emailscheduledto",{"_index":186,"title":{"classes/EmailScheduleDto.html":{}},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["emailschedulingcontroller",{"_index":206,"title":{"controllers/EmailSchedulingController.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["emailschedulingservice",{"_index":217,"title":{"injectables/EmailSchedulingService.html":{}},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{},"overview.html":{}}}],["emailservice",{"_index":182,"title":{"injectables/EmailService.html":{}},"body":{"modules/EmailModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"modules/RestaurantsModule.html":{},"coverage.html":{},"overview.html":{}}}],["ensure",{"_index":405,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["entry",{"_index":573,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["enumerations",{"_index":669,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":113,"title":{"interfaces/Error.html":{}},"body":{"injectables/AdminService.html":{},"interfaces/Error.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["event",{"_index":543,"title":{},"body":{"injectables/SyncsService.html":{}}}],["everything",{"_index":576,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["exception",{"_index":611,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["exception.validationerrors",{"_index":621,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["exceptionfilter",{"_index":606,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["existing",{"_index":535,"title":{},"body":{"injectables/SyncsService.html":{}}}],["exists",{"_index":540,"title":{},"body":{"injectables/SyncsService.html":{}}}],["export",{"_index":62,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["exports",{"_index":184,"title":{},"body":{"modules/EmailModule.html":{},"modules/FirebaseModule.html":{}}}],["express",{"_index":362,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":277,"title":{},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{}}}],["feature_request",{"_index":594,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{}}}],["filter((follower",{"_index":423,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["find",{"_index":444,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["firebase",{"_index":24,"title":{},"body":{"controllers/AdminController.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"dependencies.html":{}}}],["firebase.app.app",{"_index":295,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["firebase.auth.auth",{"_index":319,"title":{},"body":{"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{}}}],["firebase.credential.cert",{"_index":307,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["firebase.firestore.firestore",{"_index":323,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["firebase.initializeapp",{"_index":305,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["firebase.service",{"_index":286,"title":{},"body":{"modules/FirebaseModule.html":{},"injectables/PreAuthMiddleware.html":{}}}],["firebase/firebase.module",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["firebase/pre",{"_index":161,"title":{},"body":{"modules/AppModule.html":{}}}],["firebaseapp",{"_index":86,"title":{},"body":{"injectables/AdminService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}}}],["firebaseapp.getauth",{"_index":364,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["firebasemodule",{"_index":135,"title":{"modules/FirebaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FirebaseModule.html":{},"modules.html":{},"overview.html":{}}}],["firebaseservice",{"_index":79,"title":{"injectables/FirebaseService.html":{}},"body":{"injectables/AdminService.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["firestore",{"_index":289,"title":{},"body":{"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["firestorecollection",{"_index":301,"title":{},"body":{"injectables/FirebaseService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{}}}],["firstname",{"_index":434,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["fns",{"_index":654,"title":{},"body":{"dependencies.html":{}}}],["follower",{"_index":440,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["follower.email",{"_index":426,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["follower.notifications",{"_index":424,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["followers",{"_index":416,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["function",{"_index":360,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"coverage.html":{}}}],["functions",{"_index":675,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":413,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["get('/ping",{"_index":120,"title":{},"body":{"controllers/AppController.html":{}}}],["get('/secure/ping",{"_index":123,"title":{},"body":{"controllers/AppController.html":{}}}],["get('firebase_private_key",{"_index":313,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["get('users",{"_index":34,"title":{},"body":{"controllers/AdminController.html":{}}}],["get('users/:uid",{"_index":19,"title":{},"body":{"controllers/AdminController.html":{}}}],["getauth",{"_index":290,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["getrestaurantdataapi",{"_index":291,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["getting",{"_index":677,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":12,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["getuser(@param",{"_index":69,"title":{},"body":{"controllers/AdminController.html":{}}}],["getuser(uid",{"_index":15,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["getuserdataapi",{"_index":292,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["getusers",{"_index":13,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["getusers(@param",{"_index":66,"title":{},"body":{"controllers/AdminController.html":{}}}],["getusers(roles",{"_index":32,"title":{},"body":{"controllers/AdminController.html":{}}}],["global",{"_index":285,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["group",{"_index":539,"title":{},"body":{"injectables/SyncsService.html":{},"miscellaneous/enumerations.html":{}}}],["high",{"_index":582,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["host",{"_index":608,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["host.switchtohttp",{"_index":615,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["id",{"_index":106,"title":{},"body":{"injectables/AdminService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["identifier",{"_index":624,"title":{},"body":{"coverage.html":{}}}],["identify",{"_index":542,"title":{},"body":{"injectables/SyncsService.html":{},"miscellaneous/enumerations.html":{}}}],["ignore",{"_index":85,"title":{},"body":{"injectables/AdminService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}}}],["implements",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"injectables/PreAuthMiddleware.html":{},"classes/ValidationFilter.html":{}}}],["import",{"_index":52,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["imports",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["injectable",{"_index":74,"title":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":75,"title":{},"body":{"injectables/AdminService.html":{},"injectables/AppService.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["interface",{"_index":271,"title":{"interfaces/Error.html":{}},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":272,"title":{},"body":{"interfaces/Error.html":{}}}],["interpreter",{"_index":685,"title":{},"body":{"index.html":{}}}],["io/tastiest",{"_index":57,"title":{},"body":{"controllers/AdminController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FirebaseService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"dependencies.html":{}}}],["isbefore(schedulefor",{"_index":407,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["isboolean",{"_index":568,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["isdatestring",{"_index":197,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isemail",{"_index":199,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["isequal",{"_index":483,"title":{},"body":{"injectables/SupportService.html":{}}}],["isequal(original",{"_index":503,"title":{},"body":{"injectables/SupportService.html":{}}}],["isglobal",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["isin",{"_index":596,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isin(['critical",{"_index":598,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isin(['general",{"_index":599,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isint",{"_index":336,"title":{},"body":{"classes/NotifyDto.html":{}}}],["isnotempty",{"_index":203,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["isnotempty()@isstring",{"_index":588,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isoptional",{"_index":597,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isoptional()@isboolean",{"_index":586,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isoptional()@isstring()@isin(['critical",{"_index":581,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["isstring",{"_index":204,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["isstring()@isnotempty",{"_index":195,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{}}}],["isstring()@isoptional()@isin(['general",{"_index":591,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["it's",{"_index":541,"title":{},"body":{"injectables/SyncsService.html":{}}}],["job",{"_index":235,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["job.start",{"_index":247,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["job.stop",{"_index":251,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["jobs",{"_index":248,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["keyed",{"_index":546,"title":{},"body":{"injectables/SyncsService.html":{}}}],["limit",{"_index":91,"title":{},"body":{"injectables/AdminService.html":{}}}],["limit(limit",{"_index":102,"title":{},"body":{"injectables/AdminService.html":{}}}],["limits",{"_index":39,"title":{},"body":{"controllers/AdminController.html":{}}}],["lodash",{"_index":484,"title":{},"body":{"injectables/SupportService.html":{},"dependencies.html":{}}}],["logger",{"_index":552,"title":{},"body":{"injectables/TasksService.html":{}}}],["logger(tasksservice.name",{"_index":556,"title":{},"body":{"injectables/TasksService.html":{}}}],["login",{"_index":341,"title":{},"body":{"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["lookups",{"_index":548,"title":{},"body":{"injectables/SyncsService.html":{}}}],["low",{"_index":584,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["luxon",{"_index":658,"title":{},"body":{"dependencies.html":{}}}],["mail",{"_index":238,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{}}}],["mail.options",{"_index":256,"title":{},"body":{"injectables/EmailService.html":{}}}],["map((follower",{"_index":425,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["matching",{"_index":73,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["merge",{"_index":510,"title":{},"body":{"injectables/SupportService.html":{},"injectables/SyncsService.html":{}}}],["merging",{"_index":544,"title":{},"body":{"injectables/SyncsService.html":{}}}],["message",{"_index":274,"title":{},"body":{"interfaces/Error.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/SupportService.html":{},"classes/ValidationException.html":{}}}],["metadata",{"_index":662,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":175,"title":{},"body":{"modules/AppModule.html":{}}}],["methods",{"_index":10,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/ValidationFilter.html":{}}}],["middleware",{"_index":163,"title":{},"body":{"modules/AppModule.html":{},"injectables/PreAuthMiddleware.html":{}}}],["middleware.ts",{"_index":344,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"coverage.html":{}}}],["middleware.ts:14",{"_index":358,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["middleware.ts:39",{"_index":353,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["middleware.ts:8",{"_index":349,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["middlewareconsumer",{"_index":148,"title":{},"body":{"modules/AppModule.html":{}}}],["minutes",{"_index":412,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["miscellaneous",{"_index":668,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["mode",{"_index":694,"title":{},"body":{"index.html":{}}}],["module",{"_index":128,"title":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{}}}],["modules",{"_index":130,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{},"modules.html":{},"overview.html":{}}}],["ms_in_one_minute",{"_index":82,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RestaurantsService.html":{}}}],["n",{"_index":315,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["name",{"_index":26,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"index.html":{}}}],["nestjs",{"_index":680,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":55,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":647,"title":{},"body":{"dependencies.html":{}}}],["nestjs/platform",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/TasksService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":361,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["nestmodule",{"_index":152,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":233,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["next",{"_index":357,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["nodemailer",{"_index":262,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":263,"title":{},"body":{"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":253,"title":{},"body":{"injectables/EmailService.html":{}}}],["normal",{"_index":583,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["notfoundexception",{"_index":404,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["notfoundexception('could",{"_index":443,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["notifications",{"_index":417,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["notify",{"_index":383,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["notify(@body",{"_index":392,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["notify(notifydata",{"_index":384,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["notifydata",{"_index":387,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["notifydto",{"_index":329,"title":{"classes/NotifyDto.html":{}},"body":{"classes/NotifyDto.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{}}}],["npm",{"_index":691,"title":{},"body":{"index.html":{}}}],["null",{"_index":71,"title":{},"body":{"controllers/AdminController.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{}}}],["number",{"_index":335,"title":{},"body":{"classes/NotifyDto.html":{}}}],["number(request?.query?.limit",{"_index":92,"title":{},"body":{"injectables/AdminService.html":{}}}],["optional",{"_index":28,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["options",{"_index":258,"title":{},"body":{"injectables/EmailService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["order",{"_index":592,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["orderby('paidat",{"_index":99,"title":{},"body":{"injectables/AdminService.html":{}}}],["original",{"_index":490,"title":{},"body":{"injectables/SupportService.html":{}}}],["originalsnapshot",{"_index":488,"title":{},"body":{"injectables/SupportService.html":{}}}],["originalsnapshot.data",{"_index":491,"title":{},"body":{"injectables/SupportService.html":{}}}],["out",{"_index":142,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{},"overview.html":{}}}],["overview",{"_index":707,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":642,"title":{"dependencies.html":{}},"body":{}}],["page",{"_index":674,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["param",{"_index":53,"title":{},"body":{"controllers/AdminController.html":{}}}],["parameters",{"_index":25,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["particular",{"_index":22,"title":{},"body":{"controllers/AdminController.html":{}}}],["pass",{"_index":268,"title":{},"body":{"injectables/EmailService.html":{}}}],["path",{"_index":174,"title":{},"body":{"modules/AppModule.html":{},"injectables/PreAuthMiddleware.html":{}}}],["ping",{"_index":118,"title":{},"body":{"controllers/AppController.html":{}}}],["placeholders",{"_index":431,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["please",{"_index":410,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["pm2",{"_index":682,"title":{},"body":{"index.html":{}}}],["pong",{"_index":127,"title":{},"body":{"controllers/AppController.html":{}}}],["post",{"_index":54,"title":{},"body":{"controllers/AdminController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{}}}],["post('notify",{"_index":385,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["post('restaurants/updateticket",{"_index":458,"title":{},"body":{"controllers/SupportController.html":{}}}],["post('schedule",{"_index":212,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["post('segment",{"_index":517,"title":{},"body":{"controllers/SyncsController.html":{}}}],["post('users/setuserrole/:uid",{"_index":45,"title":{},"body":{"controllers/AdminController.html":{}}}],["post('users/updateticket",{"_index":462,"title":{},"body":{"controllers/SupportController.html":{}}}],["preauthmiddleware",{"_index":160,"title":{"injectables/PreAuthMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/PreAuthMiddleware.html":{},"coverage.html":{}}}],["preauthmiddleware.accessdenied(req.url",{"_index":374,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["prefix",{"_index":7,"title":{},"body":{"controllers/AdminController.html":{},"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"controllers/SupportController.html":{},"controllers/SyncsController.html":{}}}],["priority",{"_index":563,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["private",{"_index":221,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/TasksService.html":{}}}],["privatekey",{"_index":312,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["production",{"_index":696,"title":{},"body":{"index.html":{}}}],["profiles",{"_index":545,"title":{},"body":{"injectables/SyncsService.html":{}}}],["projectid",{"_index":308,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["promise",{"_index":122,"title":{},"body":{"controllers/AppController.html":{}}}],["properties",{"_index":190,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{}}}],["providers",{"_index":144,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{}}}],["public",{"_index":600,"title":{},"body":{"classes/ValidationException.html":{}}}],["query",{"_index":95,"title":{},"body":{"injectables/AdminService.html":{}}}],["quick",{"_index":547,"title":{},"body":{"injectables/SyncsService.html":{}}}],["readonly",{"_index":65,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}}}],["real",{"_index":432,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["receipients",{"_index":414,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["recipients",{"_index":193,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/RestaurantsService.html":{}}}],["ref",{"_index":485,"title":{},"body":{"injectables/SupportService.html":{}}}],["ref.get",{"_index":489,"title":{},"body":{"injectables/SupportService.html":{}}}],["ref.set(ticket",{"_index":509,"title":{},"body":{"injectables/SupportService.html":{}}}],["reflect",{"_index":661,"title":{},"body":{"dependencies.html":{}}}],["replace",{"_index":429,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["replace(/\\\\n/g",{"_index":314,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["replytoticket",{"_index":478,"title":{},"body":{"injectables/SupportService.html":{}}}],["req",{"_index":359,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["req.headers.authorization",{"_index":365,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["req['user",{"_index":369,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["request",{"_index":356,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["requestmethod",{"_index":153,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.all",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["res",{"_index":351,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["res.status(403).json",{"_index":375,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["reset",{"_index":141,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{},"overview.html":{}}}],["resolved",{"_index":564,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["response",{"_index":352,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"classes/ValidationFilter.html":{}}}],["response.end",{"_index":115,"title":{},"body":{"injectables/AdminService.html":{}}}],["response.json",{"_index":110,"title":{},"body":{"injectables/AdminService.html":{}}}],["response.json(users",{"_index":111,"title":{},"body":{"injectables/AdminService.html":{}}}],["response.status(400).json",{"_index":617,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["response.status(400).statusmessage",{"_index":114,"title":{},"body":{"injectables/AdminService.html":{}}}],["restaurant",{"_index":51,"title":{},"body":{"controllers/AdminController.html":{},"classes/NotifyDto.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"coverage.html":{}}}],["restaurant's",{"_index":415,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantdata",{"_index":420,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantdata.email?.templates?.[templateid",{"_index":442,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantdata.metrics.followers",{"_index":422,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantdataapi",{"_index":302,"title":{},"body":{"injectables/FirebaseService.html":{},"injectables/RestaurantsService.html":{}}}],["restaurantdataapi(firebase",{"_index":326,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["restaurantdataapi.getrestaurantdata",{"_index":421,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["restaurantid",{"_index":325,"title":{},"body":{"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantTicketDto.html":{}}}],["restaurants",{"_index":382,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["restaurants.controller",{"_index":398,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["restaurants.service",{"_index":390,"title":{},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{}}}],["restaurants/restaurants.module",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["restaurantscontroller",{"_index":380,"title":{"controllers/RestaurantsController.html":{}},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"coverage.html":{}}}],["restaurantsmodule",{"_index":136,"title":{"modules/RestaurantsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RestaurantsModule.html":{},"modules.html":{},"overview.html":{}}}],["restaurantsservice",{"_index":389,"title":{"injectables/RestaurantsService.html":{}},"body":{"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{},"overview.html":{}}}],["restaurantsupportrequest",{"_index":575,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["restaurantsupportrequest['priority",{"_index":580,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["results",{"_index":72,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":67,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"injectables/EmailService.html":{},"injectables/FirebaseService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"classes/ValidationFilter.html":{}}}],["returned",{"_index":43,"title":{},"body":{"controllers/AdminController.html":{}}}],["returns",{"_index":30,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/ValidationFilter.html":{}}}],["rimraf",{"_index":664,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":48,"title":{},"body":{"controllers/AdminController.html":{}}}],["roles",{"_index":38,"title":{},"body":{"controllers/AdminController.html":{},"injectables/PreAuthMiddleware.html":{}}}],["run",{"_index":692,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":666,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":506,"title":{},"body":{"injectables/SupportService.html":{}}}],["schedule",{"_index":411,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["schedule.controller.ts",{"_index":207,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"coverage.html":{}}}],["schedule.controller.ts:13",{"_index":213,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["schedule.dto",{"_index":216,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedule.dto.ts",{"_index":189,"title":{},"body":{"classes/EmailScheduleDto.html":{},"coverage.html":{}}}],["schedule.dto.ts:13",{"_index":196,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:16",{"_index":198,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:5",{"_index":201,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.dto.ts:9",{"_index":202,"title":{},"body":{"classes/EmailScheduleDto.html":{}}}],["schedule.service",{"_index":218,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{}}}],["schedule.service.ts",{"_index":225,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"coverage.html":{}}}],["schedule.service.ts:18",{"_index":228,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["schedule.service.ts:47",{"_index":227,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["scheduleemail",{"_index":210,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["scheduleemail(@body",{"_index":223,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["scheduleemail(emailschedule",{"_index":211,"title":{},"body":{"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{}}}],["schedulefollowersemail",{"_index":400,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["schedulefollowersemail(data",{"_index":401,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["schedulefor",{"_index":331,"title":{},"body":{"classes/NotifyDto.html":{},"injectables/RestaurantsService.html":{}}}],["schedulemodule",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":229,"title":{},"body":{"injectables/EmailSchedulingService.html":{},"injectables/TasksService.html":{}}}],["scheduling",{"_index":209,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["secureping",{"_index":119,"title":{},"body":{"controllers/AppController.html":{}}}],["segmenteventinner",{"_index":713,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["segmenteventtype",{"_index":670,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["segmentwebhookbody",{"_index":516,"title":{},"body":{"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"miscellaneous/typealiases.html":{}}}],["selecting",{"_index":37,"title":{},"body":{"controllers/AdminController.html":{}}}],["selection",{"_index":40,"title":{},"body":{"controllers/AdminController.html":{}}}],["send",{"_index":438,"title":{},"body":{"injectables/RestaurantsService.html":{},"injectables/SyncsService.html":{}}}],["sendmail",{"_index":254,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail(options",{"_index":255,"title":{},"body":{"injectables/EmailService.html":{}}}],["separate",{"_index":439,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["service",{"_index":265,"title":{},"body":{"injectables/EmailService.html":{}}}],["set",{"_index":47,"title":{},"body":{"controllers/AdminController.html":{},"injectables/SyncsService.html":{}}}],["setuserrole",{"_index":14,"title":{},"body":{"controllers/AdminController.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"modules/EmailModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"modules/FirebaseModule.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["src/.../main.ts",{"_index":676,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../sync.model.ts",{"_index":671,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/admin/admin.controller.ts",{"_index":6,"title":{},"body":{"controllers/AdminController.html":{},"coverage.html":{}}}],["src/admin/admin.controller.ts:15",{"_index":35,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:21",{"_index":21,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.controller.ts:30",{"_index":46,"title":{},"body":{"controllers/AdminController.html":{}}}],["src/admin/admin.service.ts",{"_index":76,"title":{},"body":{"injectables/AdminService.html":{},"coverage.html":{}}}],["src/admin/admin.service.ts:13",{"_index":78,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/admin/admin.service.ts:17",{"_index":77,"title":{},"body":{"injectables/AdminService.html":{}}}],["src/app.controller.ts",{"_index":117,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":124,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.controller.ts:9",{"_index":121,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":143,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:33",{"_index":149,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":177,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/email/email.modules.ts",{"_index":183,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service",{"_index":397,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["src/email/email.service.ts",{"_index":252,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:23",{"_index":257,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":259,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/schedule/email",{"_index":188,"title":{},"body":{"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"controllers/RestaurantsController.html":{},"modules/RestaurantsModule.html":{},"injectables/RestaurantsService.html":{},"coverage.html":{}}}],["src/filters/validation.exception.ts",{"_index":273,"title":{},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{},"coverage.html":{}}}],["src/filters/validation.exception.ts:8",{"_index":602,"title":{},"body":{"classes/ValidationException.html":{}}}],["src/filters/validation.exception.ts:9",{"_index":603,"title":{},"body":{"classes/ValidationException.html":{}}}],["src/filters/validation.filter.ts",{"_index":605,"title":{},"body":{"classes/ValidationFilter.html":{},"coverage.html":{}}}],["src/filters/validation.filter.ts:6",{"_index":610,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["src/firebase/firebase.module.ts",{"_index":284,"title":{},"body":{"modules/FirebaseModule.html":{}}}],["src/firebase/firebase.service",{"_index":80,"title":{},"body":{"injectables/AdminService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{}}}],["src/firebase/firebase.service.ts",{"_index":287,"title":{},"body":{"injectables/FirebaseService.html":{},"coverage.html":{}}}],["src/firebase/firebase.service.ts:12",{"_index":296,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/firebase.service.ts:32",{"_index":298,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/firebase.service.ts:36",{"_index":294,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/firebase.service.ts:40",{"_index":297,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/firebase.service.ts:44",{"_index":299,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/firebase.service.ts:48",{"_index":300,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["src/firebase/pre",{"_index":343,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":634,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/restaurants/dto/notify.dto.ts",{"_index":330,"title":{},"body":{"classes/NotifyDto.html":{},"coverage.html":{}}}],["src/restaurants/dto/notify.dto.ts:11",{"_index":334,"title":{},"body":{"classes/NotifyDto.html":{}}}],["src/restaurants/dto/notify.dto.ts:15",{"_index":339,"title":{},"body":{"classes/NotifyDto.html":{}}}],["src/restaurants/dto/notify.dto.ts:19",{"_index":338,"title":{},"body":{"classes/NotifyDto.html":{}}}],["src/restaurants/dto/notify.dto.ts:22",{"_index":337,"title":{},"body":{"classes/NotifyDto.html":{}}}],["src/restaurants/dto/notify.dto.ts:7",{"_index":340,"title":{},"body":{"classes/NotifyDto.html":{}}}],["src/restaurants/restaurants.controller.ts",{"_index":381,"title":{},"body":{"controllers/RestaurantsController.html":{},"coverage.html":{}}}],["src/restaurants/restaurants.controller.ts:14",{"_index":386,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["src/restaurants/restaurants.module.ts",{"_index":396,"title":{},"body":{"modules/RestaurantsModule.html":{}}}],["src/restaurants/restaurants.service.ts",{"_index":399,"title":{},"body":{"injectables/RestaurantsService.html":{},"coverage.html":{}}}],["src/restaurants/restaurants.service.ts:23",{"_index":402,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["src/support/dto/update",{"_index":561,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"coverage.html":{}}}],["src/support/support.controller.ts",{"_index":452,"title":{},"body":{"controllers/SupportController.html":{},"coverage.html":{}}}],["src/support/support.controller.ts:11",{"_index":459,"title":{},"body":{"controllers/SupportController.html":{}}}],["src/support/support.controller.ts:16",{"_index":463,"title":{},"body":{"controllers/SupportController.html":{}}}],["src/support/support.module.ts",{"_index":475,"title":{},"body":{"modules/SupportModule.html":{}}}],["src/support/support.service.ts",{"_index":477,"title":{},"body":{"injectables/SupportService.html":{},"coverage.html":{}}}],["src/support/support.service.ts:18",{"_index":481,"title":{},"body":{"injectables/SupportService.html":{}}}],["src/support/support.service.ts:50",{"_index":480,"title":{},"body":{"injectables/SupportService.html":{}}}],["src/support/support.service.ts:54",{"_index":479,"title":{},"body":{"injectables/SupportService.html":{}}}],["src/syncs/sync.model.ts",{"_index":672,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/syncs/syncs.controller.ts",{"_index":512,"title":{},"body":{"controllers/SyncsController.html":{},"coverage.html":{}}}],["src/syncs/syncs.controller.ts:10",{"_index":518,"title":{},"body":{"controllers/SyncsController.html":{}}}],["src/syncs/syncs.module.ts",{"_index":527,"title":{},"body":{"modules/SyncsModule.html":{}}}],["src/syncs/syncs.service.ts",{"_index":529,"title":{},"body":{"injectables/SyncsService.html":{},"coverage.html":{}}}],["src/syncs/syncs.service.ts:13",{"_index":530,"title":{},"body":{"injectables/SyncsService.html":{}}}],["src/tasks/tasks.service.ts",{"_index":551,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:16",{"_index":555,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:7",{"_index":558,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:8",{"_index":557,"title":{},"body":{"injectables/TasksService.html":{}}}],["start",{"_index":683,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":695,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":697,"title":{},"body":{"index.html":{}}}],["startat(startat",{"_index":101,"title":{},"body":{"injectables/AdminService.html":{}}}],["started",{"_index":678,"title":{"index.html":{}},"body":{}}],["starting",{"_index":681,"title":{},"body":{"index.html":{}}}],["startserving",{"_index":687,"title":{},"body":{"index.html":{}}}],["statements",{"_index":625,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":345,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["statuscode",{"_index":618,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["string",{"_index":16,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"classes/EmailScheduleDto.html":{},"interfaces/Error.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{}}}],["subject",{"_index":194,"title":{},"body":{"classes/EmailScheduleDto.html":{},"injectables/EmailSchedulingService.html":{},"classes/NotifyDto.html":{},"injectables/RestaurantsService.html":{}}}],["super",{"_index":280,"title":{},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{}}}],["support",{"_index":453,"title":{},"body":{"controllers/SupportController.html":{},"modules.html":{}}}],["support.controller",{"_index":476,"title":{},"body":{"modules/SupportModule.html":{}}}],["support.service",{"_index":467,"title":{},"body":{"controllers/SupportController.html":{},"modules/SupportModule.html":{}}}],["support/support.module",{"_index":165,"title":{},"body":{"modules/AppModule.html":{}}}],["supportcontroller",{"_index":451,"title":{"controllers/SupportController.html":{}},"body":{"controllers/SupportController.html":{},"modules/SupportModule.html":{},"coverage.html":{}}}],["supportmodule",{"_index":137,"title":{"modules/SupportModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SupportModule.html":{},"modules.html":{},"overview.html":{}}}],["supportrequesttype",{"_index":590,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["supportservice",{"_index":466,"title":{"injectables/SupportService.html":{}},"body":{"controllers/SupportController.html":{},"modules/SupportModule.html":{},"injectables/SupportService.html":{},"coverage.html":{},"overview.html":{}}}],["svg",{"_index":705,"title":{},"body":{"modules.html":{}}}],["sync.model",{"_index":519,"title":{},"body":{"controllers/SyncsController.html":{},"injectables/SyncsService.html":{}}}],["syncs",{"_index":513,"title":{},"body":{"controllers/SyncsController.html":{}}}],["syncs.controller",{"_index":528,"title":{},"body":{"modules/SyncsModule.html":{}}}],["syncs.service",{"_index":521,"title":{},"body":{"controllers/SyncsController.html":{},"modules/SyncsModule.html":{}}}],["syncs/syncs.module",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["syncscontroller",{"_index":511,"title":{"controllers/SyncsController.html":{}},"body":{"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"coverage.html":{}}}],["syncsegmentevent",{"_index":514,"title":{},"body":{"controllers/SyncsController.html":{},"injectables/SyncsService.html":{}}}],["syncsegmentevent(@body",{"_index":523,"title":{},"body":{"controllers/SyncsController.html":{}}}],["syncsegmentevent(body",{"_index":515,"title":{},"body":{"controllers/SyncsController.html":{},"injectables/SyncsService.html":{}}}],["syncsmodule",{"_index":138,"title":{"modules/SyncsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SyncsModule.html":{},"modules.html":{},"overview.html":{}}}],["syncsservice",{"_index":520,"title":{"injectables/SyncsService.html":{}},"body":{"controllers/SyncsController.html":{},"modules/SyncsModule.html":{},"injectables/SyncsService.html":{},"coverage.html":{},"overview.html":{}}}],["table",{"_index":641,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":640,"title":{},"body":{"coverage.html":{}}}],["tasks/tasks.service",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["tasksservice",{"_index":139,"title":{"injectables/TasksService.html":{}},"body":{"modules/AppModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["tastiest",{"_index":56,"title":{},"body":{"controllers/AdminController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FirebaseService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"dependencies.html":{},"index.html":{}}}],["template",{"_index":428,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["template.html",{"_index":448,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["template.isapproved",{"_index":445,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["templateid",{"_index":332,"title":{},"body":{"classes/NotifyDto.html":{},"injectables/RestaurantsService.html":{}}}],["test",{"_index":700,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":703,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":702,"title":{},"body":{"index.html":{}}}],["tests",{"_index":699,"title":{},"body":{"index.html":{}}}],["text",{"_index":242,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["then(async",{"_index":367,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["this.adminservice.getuser(uid",{"_index":70,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.adminservice.getusers",{"_index":68,"title":{},"body":{"controllers/AdminController.html":{}}}],["this.auth",{"_index":363,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["this.emailschedulingservice.scheduleemail",{"_index":449,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.emailschedulingservice.scheduleemail(emailschedule",{"_index":224,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["this.emailservice.sendmail",{"_index":244,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.firebaseapp",{"_index":304,"title":{},"body":{"injectables/FirebaseService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{}}}],["this.firebaseapp.auth",{"_index":320,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["this.firebaseapp.auth().setcustomuserclaims",{"_index":318,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["this.firebaseapp.firestore",{"_index":324,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["this.firebaseapp.getrestaurantdataapi(restaurantid",{"_index":419,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["this.firestore().collection(collection",{"_index":322,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["this.logger.log('sdf",{"_index":560,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.nodemailertransport",{"_index":264,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail(options",{"_index":270,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.restaurantsservice.schedulefollowersemail(notifydata",{"_index":393,"title":{},"body":{"controllers/RestaurantsController.html":{}}}],["this.schedulerregistry.addcronjob",{"_index":245,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.schedulerregistry.getcronjobs",{"_index":249,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.schedulerregistry.getcronjobs().foreach((job",{"_index":250,"title":{},"body":{"injectables/EmailSchedulingService.html":{}}}],["this.supportservice.updaterestaurantticket(data",{"_index":470,"title":{},"body":{"controllers/SupportController.html":{}}}],["this.supportservice.updateuserticket(data",{"_index":472,"title":{},"body":{"controllers/SupportController.html":{}}}],["this.syncsservice.syncsegmentevent(body",{"_index":524,"title":{},"body":{"controllers/SyncsController.html":{}}}],["throw",{"_index":409,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["ticket",{"_index":507,"title":{},"body":{"injectables/SupportService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto",{"_index":465,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["ticket.dto.ts",{"_index":562,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"coverage.html":{}}}],["ticket.dto.ts:12",{"_index":570,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{}}}],["ticket.dto.ts:17",{"_index":571,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto.ts:22",{"_index":589,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto.ts:24",{"_index":569,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{}}}],["ticket.dto.ts:27",{"_index":566,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{}}}],["ticket.dto.ts:29",{"_index":587,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto.ts:34",{"_index":585,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto.ts:39",{"_index":595,"title":{},"body":{"classes/UpdateUserTicketDto.html":{}}}],["ticket.dto.ts:8",{"_index":574,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{}}}],["ticketid",{"_index":565,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["timestamp",{"_index":376,"title":{},"body":{"injectables/PreAuthMiddleware.html":{},"injectables/SyncsService.html":{}}}],["timing",{"_index":406,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["todo",{"_index":436,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["token",{"_index":333,"title":{},"body":{"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["track",{"_index":673,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["transformer",{"_index":651,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"classes/EmailScheduleDto.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{}}}],["try",{"_index":94,"title":{},"body":{"injectables/AdminService.html":{},"injectables/SyncsService.html":{}}}],["turned",{"_index":418,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["type",{"_index":27,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"modules/AppModule.html":{},"classes/EmailScheduleDto.html":{},"controllers/EmailSchedulingController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/EmailService.html":{},"interfaces/Error.html":{},"injectables/FirebaseService.html":{},"classes/NotifyDto.html":{},"injectables/PreAuthMiddleware.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"controllers/SyncsController.html":{},"injectables/SyncsService.html":{},"injectables/TasksService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":711,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["uid",{"_index":29,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["undefined",{"_index":494,"title":{},"body":{"injectables/SupportService.html":{}}}],["unit",{"_index":698,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":31,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{},"controllers/RestaurantsController.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{}}}],["update",{"_index":579,"title":{},"body":{"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["updated",{"_index":492,"title":{},"body":{"injectables/SupportService.html":{}}}],["updated.priority",{"_index":495,"title":{},"body":{"injectables/SupportService.html":{}}}],["updated.resolved",{"_index":497,"title":{},"body":{"injectables/SupportService.html":{}}}],["updated.type",{"_index":499,"title":{},"body":{"injectables/SupportService.html":{}}}],["updatedat",{"_index":508,"title":{},"body":{"injectables/SupportService.html":{}}}],["updaterestaurants",{"_index":553,"title":{},"body":{"injectables/TasksService.html":{}}}],["updaterestaurantticket",{"_index":454,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["updaterestaurantticket(@body",{"_index":469,"title":{},"body":{"controllers/SupportController.html":{}}}],["updaterestaurantticket(data",{"_index":456,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["updaterestaurantticketdto",{"_index":457,"title":{"classes/UpdateRestaurantTicketDto.html":{}},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"coverage.html":{}}}],["updateuserticket",{"_index":455,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["updateuserticket(@body",{"_index":471,"title":{},"body":{"controllers/SupportController.html":{}}}],["updateuserticket(data",{"_index":460,"title":{},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{}}}],["updateuserticketdto",{"_index":461,"title":{"classes/UpdateUserTicketDto.html":{}},"body":{"controllers/SupportController.html":{},"injectables/SupportService.html":{},"classes/UpdateUserTicketDto.html":{},"coverage.html":{}}}],["url",{"_index":354,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["use",{"_index":347,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["use(req",{"_index":355,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["useguards(jwtauthenticationguard",{"_index":222,"title":{},"body":{"controllers/EmailSchedulingController.html":{}}}],["user",{"_index":23,"title":{},"body":{"controllers/AdminController.html":{},"injectables/EmailService.html":{},"controllers/SupportController.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/UpdateUserTicketDto.html":{},"coverage.html":{}}}],["userdataapi",{"_index":303,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["userdataapi(firebase",{"_index":328,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["userexists",{"_index":536,"title":{},"body":{"injectables/SyncsService.html":{}}}],["userid",{"_index":327,"title":{},"body":{"injectables/FirebaseService.html":{}}}],["userrecord",{"_index":103,"title":{},"body":{"injectables/AdminService.html":{}}}],["userrole",{"_index":33,"title":{},"body":{"controllers/AdminController.html":{}}}],["users",{"_index":36,"title":{},"body":{"controllers/AdminController.html":{},"injectables/AdminService.html":{}}}],["users.push",{"_index":105,"title":{},"body":{"injectables/AdminService.html":{}}}],["users?.length",{"_index":109,"title":{},"body":{"injectables/AdminService.html":{}}}],["userssnapshot",{"_index":98,"title":{},"body":{"injectables/AdminService.html":{}}}],["userssnapshot.foreach(doc",{"_index":104,"title":{},"body":{"injectables/AdminService.html":{}}}],["usersupportrequest",{"_index":482,"title":{},"body":{"injectables/SupportService.html":{}}}],["utils",{"_index":58,"title":{},"body":{"controllers/AdminController.html":{},"injectables/EmailSchedulingService.html":{},"injectables/FirebaseService.html":{},"injectables/RestaurantsService.html":{},"injectables/SupportService.html":{},"injectables/SyncsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"dependencies.html":{}}}],["valid",{"_index":342,"title":{},"body":{"classes/NotifyDto.html":{},"injectables/RestaurantsService.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{}}}],["validation.exception",{"_index":612,"title":{},"body":{"classes/ValidationFilter.html":{}}}],["validationerrors",{"_index":279,"title":{},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{}}}],["validationexception",{"_index":276,"title":{"classes/ValidationException.html":{}},"body":{"interfaces/Error.html":{},"classes/ValidationException.html":{},"classes/ValidationFilter.html":{},"coverage.html":{}}}],["validationfilter",{"_index":604,"title":{"classes/ValidationFilter.html":{}},"body":{"classes/ValidationFilter.html":{},"coverage.html":{}}}],["validator",{"_index":205,"title":{},"body":{"classes/EmailScheduleDto.html":{},"classes/NotifyDto.html":{},"classes/UpdateRestaurantTicketDto.html":{},"classes/UpdateUserTicketDto.html":{},"dependencies.html":{}}}],["value",{"_index":293,"title":{},"body":{"injectables/FirebaseService.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":433,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["verifyidtoken(token.replace('bearer",{"_index":366,"title":{},"body":{"injectables/PreAuthMiddleware.html":{}}}],["vince",{"_index":87,"title":{},"body":{"injectables/AdminService.html":{}}}],["void",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailSchedulingService.html":{},"injectables/PreAuthMiddleware.html":{}}}],["watch",{"_index":693,"title":{},"body":{"index.html":{}}}],["work",{"_index":437,"title":{},"body":{"injectables/RestaurantsService.html":{}}}],["yarn",{"_index":684,"title":{},"body":{"index.html":{}}}],["yes",{"_index":44,"title":{},"body":{"controllers/AdminController.html":{}}}],["zoom",{"_index":140,"title":{},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/FirebaseModule.html":{},"modules/RestaurantsModule.html":{},"modules/SupportModule.html":{},"modules/SyncsModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AdminController.html":{"url":"controllers/AdminController.html","title":"controller - AdminController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AdminController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                admin\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                            \n                                    Async\n                                setUserRole\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(uid: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('users/:uid')\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:21\n                \n            \n\n\n            \n                \n                    Get a particular user in Firebase.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers(roles?: UserRole[])\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('users')\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:15\n                \n            \n\n\n            \n                \n                    Get users in Firebase.\nSelecting roles limits selection.\nBy default, only eaters will be returned.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    roles\n                                    \n                                            UserRole[]\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setUserRole\n                        \n                    \n                \n            \n            \n                \n                    \n                    setUserRole()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('users/setUserRole/:uid')\n                \n            \n\n            \n                \n                    Defined in src/admin/admin.controller.ts:30\n                \n            \n\n\n            \n                \n                    Set a role (claim) on a user. Eg. restaurant or admin.\n\n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param, Post } from '@nestjs/common';\nimport { UserRole } from '@tastiest-io/tastiest-utils';\nimport { AdminService } from './admin.service';\n\n@Controller('admin')\nexport class AdminController {\n  constructor(private readonly adminService: AdminService) {}\n\n  /**\n   * Get users in Firebase.\n   * Selecting roles limits selection.\n   * By default, only eaters will be returned.\n   */\n  @Get('users')\n  async getUsers(@Param() roles?: UserRole[]) {\n    return this.adminService.getUsers();\n  }\n\n  /** Get a particular user in Firebase. */\n  @Get('users/:uid')\n  async getUser(@Param() uid: string) {\n    return this.adminService.getUser(uid);\n  }\n\n  /**\n   * Set a role (claim) on a user. Eg. `restaurant` or `admin`.\n   * @param role The role of the user to set.\n   */\n  @Post('users/setUserRole/:uid')\n  async setUserRole() {\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminService.html":{"url":"injectables/AdminService.html","title":"injectable - AdminService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AdminService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/admin/admin.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getUser\n                            \n                            \n                                    Async\n                                getUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUser(uid: string)\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    uid\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/admin/admin.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { FirebaseService } from 'src/firebase/firebase.service';\n\n// const MS_IN_ONE_MINUTE = 60 * 1000;\n\n@Injectable()\nexport class AdminService {\n  /**\n   * @ignore\n   */\n  constructor(private readonly firebaseApp: FirebaseService) {}\n\n  async getUsers() {\n    return ['vince', 'dan'];\n  }\n\n  async getUser(uid: string) {\n    return 'bob the cat';\n  }\n}\n//   const limit = Number(request?.query?.limit ?? 100);\n\n//   try {\n//     const query = await db(FirestoreCollection.USERS);\n\n//     const usersSnapshot = await query\n//       // .orderBy('paidAt', 'desc')\n//       // .startAt(startAt)\n//       .limit(limit)\n//       .get();\n\n//     const users: UserRecord[] = [];\n//     usersSnapshot.forEach(doc =>\n//       users.push({ id: doc.id, ...doc.data() } as UserRecord),\n//     );\n\n//     if (!users?.length) {\n//       response.json([]);\n//       return;\n//     }\n\n//     response.json(users);\n//   } catch (error) {\n//     response.status(400).statusMessage = `Error: ${error}`;\n//     response.end();\n//     return;\n//   }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                ping\n                            \n                            \n                                    Async\n                                securePing\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        ping\n                        \n                    \n                \n            \n            \n                \n                    \n                    ping()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/ping')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        securePing\n                        \n                    \n                \n            \n            \n                \n                    \n                    securePing()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/secure/ping')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get('/ping')\n  async ping(): Promise {\n    return 'pong';\n  }\n\n  @Get('/secure/ping')\n  async securePing(): Promise {\n    return 'pong';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nFirebaseModule\n\nFirebaseModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nFirebaseModule->AppModule\n\n\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nAppModule -->\n\nRestaurantsModule->AppModule\n\n\n\n\n\nSupportModule\n\nSupportModule\n\nAppModule -->\n\nSupportModule->AppModule\n\n\n\n\n\nSyncsModule\n\nSyncsModule\n\nAppModule -->\n\nSyncsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nAppModule -->\n\nTasksService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FirebaseModule\n                        \n                        \n                            RestaurantsModule\n                        \n                        \n                            SupportModule\n                        \n                        \n                            SyncsModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ScheduleModule } from '@nestjs/schedule';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { FirebaseModule } from './firebase/firebase.module';\nimport { PreAuthMiddleware } from './firebase/pre-auth-middleware';\nimport { RestaurantsModule } from './restaurants/restaurants.module';\nimport { SupportModule } from './support/support.module';\nimport { SyncsModule } from './syncs/syncs.module';\nimport { TasksService } from './tasks/tasks.service';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n    }),\n    FirebaseModule,\n    SyncsModule,\n    SupportModule,\n    RestaurantsModule,\n    ScheduleModule.forRoot(),\n  ],\n  controllers: [AppController],\n  providers: [AppService, TasksService],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(PreAuthMiddleware).forRoutes({\n      path: '/*',\n      method: RequestMethod.ALL,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.modules.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport EmailService from './email.service';\n\n@Module({\n  imports: [ConfigModule],\n  controllers: [],\n  providers: [EmailService],\n  exports: [EmailService],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmailScheduleDto.html":{"url":"classes/EmailScheduleDto.html","title":"class - EmailScheduleDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmailScheduleDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/schedule/email-schedule.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                content\n                            \n                            \n                                date\n                            \n                            \n                                recipients\n                            \n                            \n                                subject\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/schedule/email-schedule.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDateString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/schedule/email-schedule.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipients\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail({}, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/schedule/email-schedule.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email/schedule/email-schedule.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsEmail, IsNotEmpty, IsString } from 'class-validator';\n\nexport class EmailScheduleDto {\n  @IsEmail({}, { each: true })\n  recipients: string[];\n\n  @IsString()\n  @IsNotEmpty()\n  subject: string;\n\n  @IsString()\n  @IsNotEmpty()\n  content: string;\n\n  @IsDateString()\n  date: string;\n}\n\nexport default EmailScheduleDto;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailSchedulingController.html":{"url":"controllers/EmailSchedulingController.html","title":"controller - EmailSchedulingController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailSchedulingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/schedule/email-schedule.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-scheduling\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('schedule')\n                \n            \n\n            \n                \n                    Defined in src/email/schedule/email-schedule.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport EmailScheduleDto from './email-schedule.dto';\nimport EmailSchedulingService from './email-schedule.service';\n\n@Controller('email-scheduling')\nexport default class EmailSchedulingController {\n  constructor(\n    private readonly emailSchedulingService: EmailSchedulingService,\n  ) {}\n\n  @Post('schedule')\n  //   @UseGuards(JwtAuthenticationGuard)\n  async scheduleEmail(@Body() emailSchedule: EmailScheduleDto) {\n    this.emailSchedulingService.scheduleEmail(emailSchedule);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailSchedulingService.html":{"url":"injectables/EmailSchedulingService.html","title":"injectable - EmailSchedulingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailSchedulingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/schedule/email-schedule.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                cancelAllScheduledEmails\n                            \n                            \n                                scheduleEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        cancelAllScheduledEmails\n                        \n                    \n                \n            \n            \n                \ncancelAllScheduledEmails()\n                \n            \n\n\n            \n                \n                    Defined in src/email/schedule/email-schedule.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleEmail\n                        \n                    \n                \n            \n            \n                \nscheduleEmail(emailSchedule: EmailScheduleDto)\n                \n            \n\n\n            \n                \n                    Defined in src/email/schedule/email-schedule.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    emailSchedule\n                                    \n                                                EmailScheduleDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { SchedulerRegistry } from '@nestjs/schedule';\nimport { dlog } from '@tastiest-io/tastiest-utils';\nimport { CronJob } from 'cron';\nimport EmailService from '../email.service';\nimport EmailScheduleDto from './email-schedule.dto';\n\n@Injectable()\nexport default class EmailSchedulingService {\n  /**\n   * @ignore\n   */\n  constructor(\n    private readonly emailService: EmailService,\n    private readonly schedulerRegistry: SchedulerRegistry,\n  ) {}\n\n  scheduleEmail(emailSchedule: EmailScheduleDto) {\n    const date = new Date(emailSchedule.date);\n    const job = new CronJob(date, () => {\n      console.log('Sending mail!');\n\n      dlog('emailSchedule.service ➡️ ', {\n        to: emailSchedule.recipients,\n        subject: emailSchedule.subject,\n        text: emailSchedule.content,\n      });\n\n      // this.emailService.sendMail({\n      //   to: emailSchedule.recipients,\n      //   subject: emailSchedule.subject,\n      //   text: emailSchedule.content,\n      // });\n    });\n\n    this.schedulerRegistry.addCronJob(\n      `${Date.now()}-${emailSchedule.subject}`,\n      job,\n    );\n\n    job.start();\n\n    const jobs = this.schedulerRegistry.getCronJobs();\n    dlog('emailSchedule.service ➡️ jobs:', jobs);\n  }\n\n  cancelAllScheduledEmails() {\n    this.schedulerRegistry.getCronJobs().forEach((job) => {\n      job.stop();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\nimport * as Mail from 'nodemailer/lib/mailer';\n\n@Injectable()\nexport default class EmailService {\n  private nodemailerTransport: Mail;\n\n  /**\n   * @ignore\n   */\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      service: configService.get('EMAIL_SERVICE'),\n      auth: {\n        user: configService.get('EMAIL_USER'),\n        pass: configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Error.html":{"url":"interfaces/Error.html","title":"interface - Error","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Error\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/validation.exception.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            error\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        error\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        error:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\ninterface Error {\n  error: string;\n  message: string;\n}\n\nexport class ValidationException extends BadRequestException {\n  constructor(public validationErrors: Error[]) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FirebaseModule.html":{"url":"modules/FirebaseModule.html","title":"module - FirebaseModule","body":"\n                   \n\n\n\n\n    Modules\n    FirebaseModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_FirebaseModule_exports\n\n\n\n\nFirebaseService \n\nFirebaseService \n\n\n\nFirebaseModule\n\nFirebaseModule\n\nFirebaseService  -->\n\nFirebaseModule->FirebaseService \n\n\n\n\n\nFirebaseService\n\nFirebaseService\n\nFirebaseModule -->\n\nFirebaseService->FirebaseModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/firebase/firebase.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FirebaseService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FirebaseService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common';\nimport { FirebaseService } from './firebase.service';\n\n@Global()\n@Module({\n  providers: [FirebaseService],\n  exports: [FirebaseService],\n})\nexport class FirebaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseService.html":{"url":"injectables/FirebaseService.html","title":"injectable - FirebaseService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/firebase.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                db\n                            \n                            \n                                    Private\n                                firebaseApp\n                            \n                            \n                                firestore\n                            \n                            \n                                getAuth\n                            \n                            \n                                getRestaurantDataApi\n                            \n                            \n                                getUserDataApi\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        firebaseApp\n                        \n                    \n                \n            \n                \n                    \n                        Type :     firebase.app.App\n\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firestore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuth\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getRestaurantDataApi\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserDataApi\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/firebase/firebase.service.ts:48\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport {\n  FirestoreCollection,\n  RestaurantDataApi,\n  UserDataApi,\n} from '@tastiest-io/tastiest-utils';\nimport * as firebase from 'firebase-admin';\n\n@Injectable()\nexport class FirebaseService {\n  private firebaseApp: firebase.app.App;\n\n  /**\n   * @ignore\n   */\n  constructor(private configService: ConfigService) {\n    this.firebaseApp = firebase.initializeApp({\n      credential: firebase.credential.cert({\n        projectId: configService.get('FIREBASE_PROJECT_ID'),\n        clientEmail: configService.get('FIREBASE_CLIENT_EMAIL'),\n        privateKey: configService\n          .get('FIREBASE_PRIVATE_KEY')\n          .replace(/\\\\n/g, '\\n'),\n      }),\n      databaseURL: configService.get('FIREBASE_DATABASE_URL'),\n    });\n\n    this.firebaseApp.auth().setCustomUserClaims;\n  }\n\n  getAuth = (): firebase.auth.Auth => {\n    return this.firebaseApp.auth();\n  };\n\n  db = (collection: FirestoreCollection) => {\n    return this.firestore().collection(collection);\n  };\n\n  firestore = (): firebase.firestore.Firestore => {\n    return this.firebaseApp.firestore();\n  };\n\n  getRestaurantDataApi = (restaurantId: string) => {\n    return new RestaurantDataApi(firebase, restaurantId);\n  };\n\n  getUserDataApi = (userId: string) => {\n    return new UserDataApi(firebase, userId);\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotifyDto.html":{"url":"classes/NotifyDto.html","title":"class - NotifyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotifyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restaurants/dto/notify.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                restaurantId\n                            \n                            \n                                scheduleFor\n                            \n                            \n                                subject\n                            \n                            \n                                templateId\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        restaurantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/restaurants/dto/notify.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scheduleFor\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsInt()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/restaurants/dto/notify.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subject\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/restaurants/dto/notify.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        templateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/restaurants/dto/notify.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/restaurants/dto/notify.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsNotEmpty, IsString } from 'class-validator';\n\nclass NotifyDto {\n  // From Firestore login. Admin or a valid restaurant\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n\n  @IsString()\n  @IsNotEmpty()\n  restaurantId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  templateId: string;\n\n  @IsString()\n  @IsNotEmpty()\n  subject: string;\n\n  @IsInt()\n  scheduleFor: number;\n}\n\nexport default NotifyDto;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PreAuthMiddleware.html":{"url":"injectables/PreAuthMiddleware.html","title":"injectable - PreAuthMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PreAuthMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/firebase/pre-auth-middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                auth\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                accessDenied\n                            \n                            \n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseApp: FirebaseService)\n                    \n                \n                        \n                            \n                                Defined in src/firebase/pre-auth-middleware.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseApp\n                                                  \n                                                        \n                                                                        FirebaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Static\n                        accessDenied\n                        \n                    \n                \n            \n            \n                \n                    \n                    accessDenied(url: string, res: Response)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/pre-auth-middleware.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    url\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        use\n                        \n                    \n                \n            \n            \n                \nuse(req: Request, res: Response, next: () => void)\n                \n            \n\n\n            \n                \n                    Defined in src/firebase/pre-auth-middleware.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :     firebase.auth.Auth\n\n                    \n                \n                    \n                        \n                                Defined in src/firebase/pre-auth-middleware.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NestMiddleware } from '@nestjs/common';\nimport { Request, Response } from 'express';\nimport * as firebase from 'firebase-admin';\nimport { FirebaseService } from './firebase.service';\n\n@Injectable()\nexport class PreAuthMiddleware implements NestMiddleware {\n  private auth: firebase.auth.Auth;\n\n  constructor(private firebaseApp: FirebaseService) {\n    this.auth = firebaseApp.getAuth();\n  }\n\n  use(req: Request, res: Response, next: () => void) {\n    const token = req.headers.authorization;\n\n    if (token != null && token != '') {\n      this.auth\n        .verifyIdToken(token.replace('Bearer ', ''))\n        .then(async (decodedToken) => {\n          req['user'] = {\n            email: decodedToken.email,\n            roles: decodedToken.roles || [],\n            type: decodedToken.type,\n          };\n\n          console.log('pre-auth-middleware ➡️ decodedToken:', decodedToken);\n\n          next();\n        })\n        .catch(() => {\n          PreAuthMiddleware.accessDenied(req.url, res);\n        });\n    } else {\n      PreAuthMiddleware.accessDenied(req.url, res);\n    }\n  }\n\n  private static accessDenied(url: string, res: Response) {\n    res.status(403).json({\n      timestamp: new Date().toISOString(),\n      message: 'Access denied',\n      path: url,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/RestaurantsController.html":{"url":"controllers/RestaurantsController.html","title":"controller - RestaurantsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  RestaurantsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restaurants/restaurants.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                restaurants\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                notify\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        notify\n                        \n                    \n                \n            \n            \n                \n                    \n                    notify(notifyData: NotifyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notify')\n                \n            \n\n            \n                \n                    Defined in src/restaurants/restaurants.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    notifyData\n                                    \n                                                NotifyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport EmailSchedulingService from 'src/email/schedule/email-schedule.service';\nimport NotifyDto from './dto/notify.dto';\nimport { RestaurantsService } from './restaurants.service';\n\n@Controller('restaurants')\nexport class RestaurantsController {\n  constructor(\n    private readonly restaurantsService: RestaurantsService,\n    private readonly emailSchedulingService: EmailSchedulingService,\n  ) {}\n\n  @Post('notify')\n  async notify(@Body() notifyData: NotifyDto) {\n    return this.restaurantsService.scheduleFollowersEmail(notifyData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RestaurantsModule.html":{"url":"modules/RestaurantsModule.html","title":"module - RestaurantsModule","body":"\n                   \n\n\n\n\n    Modules\n    RestaurantsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RestaurantsModule\n\n\n\ncluster_RestaurantsModule_providers\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nRestaurantsModule -->\n\nEmailSchedulingService->RestaurantsModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nRestaurantsModule -->\n\nEmailService->RestaurantsModule\n\n\n\n\n\nRestaurantsService\n\nRestaurantsService\n\nRestaurantsModule -->\n\nRestaurantsService->RestaurantsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/restaurants/restaurants.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailSchedulingService\n                        \n                        \n                            EmailService\n                        \n                        \n                            RestaurantsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            RestaurantsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport EmailService from 'src/email/email.service';\nimport EmailSchedulingService from 'src/email/schedule/email-schedule.service';\nimport { RestaurantsController } from './restaurants.controller';\nimport { RestaurantsService } from './restaurants.service';\n\n@Module({\n  controllers: [RestaurantsController],\n  providers: [RestaurantsService, EmailService, EmailSchedulingService],\n})\nexport class RestaurantsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RestaurantsService.html":{"url":"injectables/RestaurantsService.html","title":"injectable - RestaurantsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  RestaurantsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/restaurants/restaurants.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                scheduleFollowersEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        scheduleFollowersEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    scheduleFollowersEmail(data: NotifyDto)\n                \n            \n\n\n            \n                \n                    Defined in src/restaurants/restaurants.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                NotifyDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { dlog } from '@tastiest-io/tastiest-utils';\nimport EmailSchedulingService from 'src/email/schedule/email-schedule.service';\nimport { FirebaseService } from 'src/firebase/firebase.service';\nimport NotifyDto from './dto/notify.dto';\n\n// const MS_IN_ONE_MINUTE = 60 * 1000;\n\n@Injectable()\nexport class RestaurantsService {\n  /**\n   * @ignore\n   */\n  constructor(\n    private readonly emailSchedulingService: EmailSchedulingService,\n    private readonly firebaseApp: FirebaseService,\n  ) {}\n\n  async scheduleFollowersEmail(data: NotifyDto) {\n    const { token, restaurantId, templateId, subject, scheduleFor } = data;\n\n    // Ensure the timing is valid\n    // if (isBefore(scheduleFor, Date.now() + 5 * MS_IN_ONE_MINUTE)) {\n    //   throw new BadRequestException(\n    //     'Please schedule for at least 5 minutes in the future.',\n    //   );\n    // }\n\n    // Receipients are all the restaurant's followers with notifications turned on.\n    const restaurantDataApi =\n      this.firebaseApp.getRestaurantDataApi(restaurantId);\n\n    const restaurantData = await restaurantDataApi.getRestaurantData();\n    const recipients = restaurantData.metrics.followers\n      .filter((follower) => follower.notifications)\n      .map((follower) => follower.email);\n\n    dlog('restaurants.service ➡️ recipients:', recipients);\n\n    // Get template and replace content's placeholders with real values.\n    // Eg {{ firstName }} --> Daniel\n    // TODO: Work out how to send a separate email to each follower with different content.\n    const template = restaurantData.email?.templates?.[templateId] ?? null;\n    if (!template) {\n      throw new NotFoundException('Could not find template.');\n    }\n\n    if (!template.isApproved) {\n      throw new BadRequestException('Template is not approved.');\n    }\n\n    const content = template.html;\n\n    return this.emailSchedulingService.scheduleEmail({\n      recipients,\n      subject,\n      content,\n      date: new Date(scheduleFor).toUTCString(),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SupportController.html":{"url":"controllers/SupportController.html","title":"controller - SupportController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SupportController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/support/support.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                support\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                updateRestaurantTicket\n                            \n                            \n                                updateUserTicket\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        updateRestaurantTicket\n                        \n                    \n                \n            \n            \n                \nupdateRestaurantTicket(data: UpdateRestaurantTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('restaurants/updateTicket')\n                \n            \n\n            \n                \n                    Defined in src/support/support.controller.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateRestaurantTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUserTicket\n                        \n                    \n                \n            \n            \n                \nupdateUserTicket(data: UpdateUserTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('users/updateTicket')\n                \n            \n\n            \n                \n                    Defined in src/support/support.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateUserTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport UpdateRestaurantTicketDto from './dto/update-restaurant-ticket.dto';\nimport UpdateUserTicketDto from './dto/update-user-ticket.dto';\nimport { SupportService } from './support.service';\n\n@Controller('support')\nexport class SupportController {\n  constructor(private readonly supportService: SupportService) {}\n\n  @Post('restaurants/updateTicket')\n  updateRestaurantTicket(@Body() data: UpdateRestaurantTicketDto) {\n    return this.supportService.updateRestaurantTicket(data);\n  }\n\n  @Post('users/updateTicket')\n  updateUserTicket(@Body() data: UpdateUserTicketDto) {\n    return this.supportService.updateUserTicket(data);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SupportModule.html":{"url":"modules/SupportModule.html","title":"module - SupportModule","body":"\n                   \n\n\n\n\n    Modules\n    SupportModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SupportModule\n\n\n\ncluster_SupportModule_providers\n\n\n\n\nSupportService\n\nSupportService\n\n\n\nSupportModule\n\nSupportModule\n\nSupportModule -->\n\nSupportService->SupportModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/support/support.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SupportService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SupportController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SupportController } from './support.controller';\nimport { SupportService } from './support.service';\n\n@Module({\n  controllers: [SupportController],\n  providers: [SupportService],\n})\nexport class SupportModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SupportService.html":{"url":"injectables/SupportService.html","title":"injectable - SupportService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SupportService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/support/support.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                replyToTicket\n                            \n                            \n                                updateRestaurantTicket\n                            \n                            \n                                    Async\n                                updateUserTicket\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        replyToTicket\n                        \n                    \n                \n            \n            \n                \nreplyToTicket()\n                \n            \n\n\n            \n                \n                    Defined in src/support/support.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateRestaurantTicket\n                        \n                    \n                \n            \n            \n                \nupdateRestaurantTicket(data: UpdateRestaurantTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/support/support.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateRestaurantTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserTicket\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserTicket(data: UpdateUserTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/support/support.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                                UpdateUserTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport {\n  FirestoreCollection,\n  UserSupportRequest,\n} from '@tastiest-io/tastiest-utils';\nimport { isEqual } from 'lodash';\nimport { FirebaseService } from 'src/firebase/firebase.service';\nimport UpdateRestaurantTicketDto from './dto/update-restaurant-ticket.dto';\nimport UpdateUserTicketDto from './dto/update-user-ticket.dto';\n\n@Injectable()\nexport class SupportService {\n  /**\n   * @ignore\n   */\n  constructor(private readonly firebaseApp: FirebaseService) {}\n\n  async updateUserTicket(data: UpdateUserTicketDto) {\n    const ref = this.firebaseApp\n      .db(FirestoreCollection.SUPPORT_USERS)\n      .doc(data.ticketId);\n\n    const originalSnapshot = await ref.get();\n    const original = originalSnapshot.data() as UserSupportRequest;\n\n    // Updated file\n    const updated = { ...original };\n\n    if (data.priority !== undefined) updated.priority = data.priority;\n    if (data.resolved !== undefined) updated.resolved = data.resolved;\n    if (data.type !== undefined) updated.type = data.type;\n\n    // Have we actually changed anything?\n    // If not, just return.\n    if (isEqual(original, updated)) {\n      console.log('Nothing changed');\n      return { message: 'critical' };\n    }\n\n    // Save new to Firestore\n    const ticket: UserSupportRequest = {\n      ...original,\n      ...updated,\n      updatedAt: Date.now(),\n    };\n\n    await ref.set(ticket, { merge: true });\n  }\n\n  updateRestaurantTicket(data: UpdateRestaurantTicketDto) {\n    return null;\n  }\n\n  replyToTicket() {\n    return null;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SyncsController.html":{"url":"controllers/SyncsController.html","title":"controller - SyncsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SyncsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/syncs/syncs.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                syncs\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                syncSegmentEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        syncSegmentEvent\n                        \n                    \n                \n            \n            \n                \nsyncSegmentEvent(body: SegmentWebhookBody)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('segment')\n                \n            \n\n            \n                \n                    Defined in src/syncs/syncs.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SegmentWebhookBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { SegmentWebhookBody } from './sync.model';\nimport { SyncsService } from './syncs.service';\n\n@Controller('syncs')\nexport class SyncsController {\n  constructor(private readonly syncsService: SyncsService) {}\n\n  @Post('segment')\n  syncSegmentEvent(@Body() body: SegmentWebhookBody): any {\n    return this.syncsService.syncSegmentEvent(body as SegmentWebhookBody);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SyncsModule.html":{"url":"modules/SyncsModule.html","title":"module - SyncsModule","body":"\n                   \n\n\n\n\n    Modules\n    SyncsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_SyncsModule\n\n\n\ncluster_SyncsModule_providers\n\n\n\n\nSyncsService\n\nSyncsService\n\n\n\nSyncsModule\n\nSyncsModule\n\nSyncsModule -->\n\nSyncsService->SyncsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/syncs/syncs.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SyncsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SyncsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { SyncsController } from './syncs.controller';\nimport { SyncsService } from './syncs.service';\n\n@Module({\n  controllers: [SyncsController],\n  providers: [SyncsService],\n})\nexport class SyncsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SyncsService.html":{"url":"injectables/SyncsService.html","title":"injectable - SyncsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SyncsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/syncs/syncs.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                syncSegmentEvent\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        syncSegmentEvent\n                        \n                    \n                \n            \n            \n                \nsyncSegmentEvent(body: SegmentWebhookBody)\n                \n            \n\n\n            \n                \n                    Defined in src/syncs/syncs.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    body\n                                    \n                                                SegmentWebhookBody\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         { body: SegmentWebhookBody; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { FirestoreCollection } from '@tastiest-io/tastiest-utils';\nimport { FirebaseService } from 'src/firebase/firebase.service';\nimport { SegmentWebhookBody } from './sync.model';\n\n@Injectable()\nexport class SyncsService {\n  /**\n   * @ignore\n   */\n  constructor(private readonly firebaseApp: FirebaseService) {}\n\n  syncSegmentEvent(body: SegmentWebhookBody) {\n    const documentId = body.userId ?? body.anonymousId;\n    const timestamp = new Date(body.timestamp).getTime();\n\n    // Is it an existing user?\n    const userExists = Boolean(body.userId);\n    if (userExists && body.type === 'group') {\n      // If the user exists and it's an identify event, try merging the profiles.\n      null;\n    }\n\n    // Send the event to Firestore.\n    // Keyed by timestamp for quick lookups.\n    this.firebaseApp\n      .db(FirestoreCollection.EVENTS)\n      .doc(documentId)\n      .set(\n        {\n          [timestamp]: {\n            ...body,\n            type: body.type,\n            timestamp,\n          },\n        },\n        { merge: true },\n      );\n\n    return { body };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                            \n                                    Private\n                                schedulerRegistry\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                updateRestaurants\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRestaurants\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRestaurants()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Cron(CronExpression.EVERY_30_SECONDS)\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        logger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Logger(TasksService.name)\n                    \n                \n                    \n                        \n                                Defined in src/tasks/tasks.service.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        schedulerRegistry\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SchedulerRegistry\n\n                    \n                \n                    \n                        \n                                Defined in src/tasks/tasks.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Logger } from '@nestjs/common';\nimport { Cron, CronExpression, SchedulerRegistry } from '@nestjs/schedule';\nimport { FirebaseService } from 'src/firebase/firebase.service';\n\n@Injectable()\nexport class TasksService {\n  private schedulerRegistry: SchedulerRegistry;\n  private readonly logger = new Logger(TasksService.name);\n\n  /**\n   * @ignore\n   */\n  constructor(private firebaseApp: FirebaseService) {}\n\n  @Cron(CronExpression.EVERY_30_SECONDS)\n  async updateRestaurants() {\n    this.logger.log('sdf');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRestaurantTicketDto.html":{"url":"classes/UpdateRestaurantTicketDto.html","title":"class - UpdateRestaurantTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRestaurantTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/support/dto/update-restaurant-ticket.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                priority\n                            \n                            \n                                resolved\n                            \n                            \n                                restaurantId\n                            \n                            \n                                ticketId\n                            \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-restaurant-ticket.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolved\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-restaurant-ticket.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        restaurantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-restaurant-ticket.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ticketId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-restaurant-ticket.dto.ts:17\n                        \n                    \n\n            \n                \n                    The corresponding ticket ID from its Firestore entry.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-restaurant-ticket.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { RestaurantSupportRequest } from '@tastiest-io/tastiest-utils';\nimport { IsBoolean, IsNotEmpty, IsString } from 'class-validator';\n\nclass UpdateRestaurantTicketDto {\n  // From Firestore login. Admin or a valid restaurant\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n\n  @IsString()\n  @IsNotEmpty()\n  restaurantId: string;\n\n  /** The corresponding ticket ID from its Firestore entry. */\n  @IsString()\n  @IsNotEmpty()\n  ticketId: string;\n\n  // /////////////////////////////////////////////////////\n  // Everything below are available options to update   //\n  // /////////////////////////////////////////////////////\n\n  @IsBoolean()\n  resolved: boolean;\n\n  @IsString()\n  priority: RestaurantSupportRequest['priority'];\n}\n\nexport default UpdateRestaurantTicketDto;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserTicketDto.html":{"url":"classes/UpdateUserTicketDto.html","title":"class - UpdateUserTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/support/dto/update-user-ticket.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                priority\n                            \n                            \n                                resolved\n                            \n                            \n                                ticketId\n                            \n                            \n                                token\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        priority\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()@IsIn(['critical', 'high', 'normal', 'low'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-user-ticket.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        resolved\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-user-ticket.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ticketId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-user-ticket.dto.ts:22\n                        \n                    \n\n            \n                \n                    The corresponding ticket ID from its Firestore entry.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-user-ticket.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SupportRequestType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@IsIn(['GENERAL', 'ORDER', 'OTHER', 'BUG', 'FEATURE_REQUEST'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/support/dto/update-user-ticket.dto.ts:39\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  RestaurantSupportRequest,\n  SupportRequestType,\n} from '@tastiest-io/tastiest-utils';\nimport {\n  IsBoolean,\n  IsIn,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nclass UpdateUserTicketDto {\n  // From Firestore login. Admin or a valid restaurant\n  @IsNotEmpty()\n  @IsString()\n  token: string;\n\n  /** The corresponding ticket ID from its Firestore entry. */\n  @IsNotEmpty()\n  @IsString()\n  ticketId: string;\n\n  // /////////////////////////////////////////////////////\n  // Everything below are available options to update   //\n  // /////////////////////////////////////////////////////\n  @IsOptional()\n  @IsBoolean()\n  resolved: boolean;\n\n  @IsOptional()\n  @IsString()\n  @IsIn(['critical', 'high', 'normal', 'low'])\n  priority: RestaurantSupportRequest['priority'];\n\n  @IsString()\n  @IsOptional()\n  @IsIn(['GENERAL', 'ORDER', 'OTHER', 'BUG', 'FEATURE_REQUEST'])\n  type: SupportRequestType;\n}\n\nexport default UpdateUserTicketDto;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationException.html":{"url":"classes/ValidationException.html","title":"class - ValidationException","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationException\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/validation.exception.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    BadRequestException\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                validationErrors\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(validationErrors: Error[])\n                    \n                \n                        \n                            \n                                Defined in src/filters/validation.exception.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        validationErrors\n                                                  \n                                                        \n                                                                        Error[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        validationErrors\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Error[]\n\n                    \n                \n                    \n                        \n                                Defined in src/filters/validation.exception.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BadRequestException } from '@nestjs/common';\n\ninterface Error {\n  error: string;\n  message: string;\n}\n\nexport class ValidationException extends BadRequestException {\n  constructor(public validationErrors: Error[]) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ValidationFilter.html":{"url":"classes/ValidationFilter.html","title":"class - ValidationFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ValidationFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/filters/validation.filter.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception: ValidationException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/filters/validation.filter.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                                ValidationException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ArgumentsHost, Catch, ExceptionFilter } from '@nestjs/common';\nimport { ValidationException } from './validation.exception';\n\n@Catch(ValidationException)\nexport class ValidationFilter implements ExceptionFilter {\n  catch(exception: ValidationException, host: ArgumentsHost): any {\n    const context = host.switchToHttp();\n    const response = context.getResponse();\n    return response.status(400).json({\n      statusCode: 400,\n      createdBy: 'ValidationFilter',\n      validationErrors: exception.validationErrors,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/admin/admin.controller.ts\n            \n            controller\n            AdminController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/admin/admin.service.ts\n            \n            injectable\n            AdminService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email/schedule/email-schedule.controller.ts\n            \n            controller\n            EmailSchedulingController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/schedule/email-schedule.dto.ts\n            \n            class\n            EmailScheduleDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/email/schedule/email-schedule.service.ts\n            \n            injectable\n            EmailSchedulingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filters/validation.exception.ts\n            \n            class\n            ValidationException\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filters/validation.exception.ts\n            \n            interface\n            Error\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/filters/validation.filter.ts\n            \n            class\n            ValidationFilter\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/firebase/firebase.service.ts\n            \n            injectable\n            FirebaseService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/firebase/pre-auth-middleware.ts\n            \n            injectable\n            PreAuthMiddleware\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/restaurants/dto/notify.dto.ts\n            \n            class\n            NotifyDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/restaurants/restaurants.controller.ts\n            \n            controller\n            RestaurantsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/restaurants/restaurants.service.ts\n            \n            injectable\n            RestaurantsService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/support/dto/update-restaurant-ticket.dto.ts\n            \n            class\n            UpdateRestaurantTicketDto\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/support/dto/update-user-ticket.dto.ts\n            \n            class\n            UpdateUserTicketDto\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/support/support.controller.ts\n            \n            controller\n            SupportController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/support/support.service.ts\n            \n            injectable\n            SupportService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/syncs/syncs.controller.ts\n            \n            controller\n            SyncsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/syncs/syncs.service.ts\n            \n            injectable\n            SyncsService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.16\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^1.0.2\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/schedule : ^1.0.1\n        \n            @tastiest-io/tastiest-utils : ^1.39.0\n        \n            class-transformer : 0.4.0\n        \n            class-validator : ^0.13.2\n        \n            date-fns : ^2.26.0\n        \n            firebase-admin : ^10.0.0\n        \n            lodash : ^4.17.21\n        \n            luxon : ^2.1.1\n        \n            nodemailer : ^6.7.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SegmentEventType   (src/.../sync.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/syncs/sync.model.ts\n    \n        \n            \n                \n                    \n                        \n                        SegmentEventType\n                    \n                \n                        \n                            \n                                 TRACK\n                            \n                        \n                        \n                            \n                                Value : track\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 GROUP\n                            \n                        \n                        \n                            \n                                Value : group\n                            \n                        \n                        \n                            \n                                 IDENTIFY\n                            \n                        \n                        \n                            \n                                Value : identify\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nTastiest Backend - NestJS\nStarting with PM2\npm2 start yarn --interpreter bash --name tastiest-backend -- startServing Documentation\nyarn documentation:serveRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:cov\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FirebaseModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RestaurantsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SupportModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SyncsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_FirebaseModule\n\n\n\ncluster_FirebaseModule_exports\n\n\n\ncluster_FirebaseModule_providers\n\n\n\ncluster_RestaurantsModule\n\n\n\ncluster_RestaurantsModule_providers\n\n\n\ncluster_SupportModule\n\n\n\ncluster_SupportModule_providers\n\n\n\ncluster_SyncsModule\n\n\n\ncluster_SyncsModule_providers\n\n\n\n\nFirebaseModule\n\nFirebaseModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nFirebaseModule->AppModule\n\n\n\n\n\nFirebaseService \n\nFirebaseService \n\nFirebaseService  -->\n\nFirebaseModule->FirebaseService \n\n\n\n\n\nRestaurantsModule\n\nRestaurantsModule\n\nAppModule -->\n\nRestaurantsModule->AppModule\n\n\n\n\n\nSupportModule\n\nSupportModule\n\nAppModule -->\n\nSupportModule->AppModule\n\n\n\n\n\nSyncsModule\n\nSyncsModule\n\nAppModule -->\n\nSyncsModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nAppModule -->\n\nTasksService->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nRestaurantsModule -->\n\nEmailService->RestaurantsModule\n\n\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nFirebaseService\n\nFirebaseService\n\nFirebaseModule -->\n\nFirebaseService->FirebaseModule\n\n\n\n\n\nEmailSchedulingService\n\nEmailSchedulingService\n\nRestaurantsModule -->\n\nEmailSchedulingService->RestaurantsModule\n\n\n\n\n\nRestaurantsService\n\nRestaurantsService\n\nRestaurantsModule -->\n\nRestaurantsService->RestaurantsModule\n\n\n\n\n\nSupportService\n\nSupportService\n\nSupportModule -->\n\nSupportService->SupportModule\n\n\n\n\n\nSyncsService\n\nSyncsService\n\nSyncsModule -->\n\nSyncsService->SyncsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SegmentEventInner   (src/.../sync.model.ts)\n                        \n                        \n                            SegmentWebhookBody   (src/.../sync.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/syncs/sync.model.ts\n    \n    \n        \n            \n                \n                    \n                    SegmentEventInner\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SegmentWebhookBody\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
