generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  /// Set by Firebase Auth.
  id         String    @id @unique() @db.VarChar
  email      String    @unique() @db.VarChar(255)
  first_name String    @db.VarChar(32)
  last_name  String?   @db.VarChar(32)
  mobile     String?   @db.VarChar(20)
  birthday   DateTime? @db.Timestamptz()

  /// JSON data of type UserPreferences
  preferences Json?

  metrics Json?

  location_lat      Float?  @db.DoublePrecision
  location_lon      Float?  @db.DoublePrecision
  location_address  String? @db.VarChar(256)
  location_postcode String? @db.VarChar(16)
  location_display  String? @db.VarChar

  stripe_customer_id  String? @db.VarChar(128)
  stripe_setup_secret String? @db.VarChar(512)

  // Toggles
  is_test_account Boolean @db.Boolean

  // Metadata
  created_at  DateTime? @default(now()) @db.Timestamptz()
  last_active DateTime? @db.Timestamptz()

  // Relations
  orders    Order[]
  bookings  Booking[]
  following FollowRelation[]

  affiliate_submissions AffiliateSubmission[]

  @@map(name: "user")
}

model Order {
  id             String   @id @default(uuid())
  token          String   @default(uuid())
  user_facing_id String   @db.VarChar(16)
  booked_for     DateTime @db.Timestamptz()
  heads          Decimal  @db.Decimal

  experience Json
  from_slug  String @db.VarChar

  // Payment information
  price          Json
  refund         Json?
  payment_card   Json?
  payment_method String? @db.VarChar
  discount_code  String? @db.VarChar

  created_at DateTime? @db.Timestamptz()
  updated_at DateTime? @updatedAt @db.Timestamptz()

  paid_at      DateTime? @db.Timestamptz()
  abandoned_at DateTime? @db.Timestamptz()

  tastiest_portion   Float? @db.DoublePrecision
  restaurant_portion Float? @db.DoublePrecision

  /// Specifically at the time the order was made.
  is_user_following Boolean
  is_test           Boolean

  // Relations
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.VarChar

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String     @db.VarChar

  booking Booking?

  @@map(name: "order")
}

model Booking {
  id                  String   @id @default(uuid())
  userFacingBookingId String   @db.VarChar
  bookedFor           DateTime @db.Timestamp()
  confirmationCode    String   @db.VarChar
  hasArrived          Boolean
  hasCancelled        Boolean
  cancelledAt         DateTime @db.Timestamp()

  // Bools
  is_confirmation_code_verified Boolean
  is_synced_with_booking_system Boolean
  is_test                       Boolean


  // Relations
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String     @db.VarChar

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String @db.VarChar@unique

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.VarChar

  @@map(name: "booking")
}

/// A relation between a restaurant and a user following them.
model FollowRelation {
  id String @id @default(uuid())

  followed_at DateTime @db.Timestamptz()

  notify_new_menu            Boolean @default(true)
  notify_general_info        Boolean @default(true)
  notify_last_minute_tables  Boolean @default(true)
  notify_limited_time_dishes Boolean @default(true)
  notify_special_experiences Boolean @default(true)

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.VarChar

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String     @db.VarChar

  @@map(name: "follow_relation")
}

model Restaurant {
  id                   String   @id @default(uuid())
  uid                  String   @db.VarChar
  name                 String   @db.VarChar
  city                 String   @db.VarChar
  cuisine              String   @db.VarChar
  uri_name             String   @db.VarChar
  booking_system       String?  @db.VarChar
  realtime             String?
  has_accepted_terms   Boolean  @default(false)
  // profileId                    Int?                @unique(map: "REL_8edf520e963cdb0fba4e825eaf")
  location_Lat         Decimal? @db.Decimal
  location_Lon         Decimal? @db.Decimal
  location_Address     String?  @db.VarChar
  location_Postcode    String?  @db.VarChar
  location_Display     String?  @db.VarChar
  contact_first_name   String   @db.VarChar
  contact_last_name    String?  @db.VarChar
  contact_Email        String?  @db.VarChar
  contact_Phone_number String?  @db.VarChar

  financial_connect_account    String?
  financial_cut_followers      Decimal? @default(0.95) @db.Decimal
  financial_cut_default        Decimal? @default(0.9) @db.Decimal
  metrics_quiet_times          Json?
  metrics_open_times           Json?
  metrics_Seating_duration     Decimal? @db.Decimal
  settings_Notify_bookings     Boolean  @default(true)
  settings_Fallback_open_times Boolean  @default(true)
  // restaurant_profile           Restaurant_Profile? @relation(fields: [profileId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_8edf520e963cdb0fba4e825eafd")
  // booking                      Booking[]


  // Toggles
  is_setup_complete Boolean @default(false)
  is_archived       Boolean @default(false)
  is_demo           Boolean @default(false)

  // Relations
  orders    Order[]
  bookings  Booking[]
  followers FollowRelation[]

  @@map(name: "restaurant")
}

model RestaurantProfile {
  id                   String  @id() @default(uuid())
  website              String? @db.VarChar
  public_phone_number  String? @db.VarChar
  profile_picture      String?
  backdrop_video       String?
  backdrop_still_frame String?
  display_photograph   String?
  hero_illustration    String?
  description          String?
  meta                 String?

  // restaurant           Restaurant?

  @@map(name: "restaurant_profile")
}

model RestaurateurApplication {
  id                String @id() @default(uuid())
  name              String @db.VarChar
  email             String @db.VarChar
  contactNumber     String @db.VarChar
  restaurantName    String @db.VarChar
  restaurantWebsite String @db.VarChar
  restaurantAddress String @db.VarChar
  description       String @db.VarChar

  @@map(name: "restaurataur_application")
}

model AffiliateSubmission {

  id            String @id() @default(uuid())
  platform      String @db.VarChar
  reference     String @db.VarChar
  affiliateType String @default("") @db.VarChar

  user_id String? @db.VarChar
  user    User?   @relation(fields: [user_id], references: [id])
  @@map(name: "affiliate_submission")
}
