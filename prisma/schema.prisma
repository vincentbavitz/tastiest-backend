generator client {
  provider = "prisma-client-js"
}

/// These are typings used by our /horus type generator.
/// Note that comments before a column like `/// type Model`
/// are crucial for our type generator to function.
/// NOTE: Any instances of `/// type [\w]*` must be a Prisma.Json type.
generator horus {
  provider = "prisma-client-js"
  output   = "../horus/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  /// Set by Firebase Auth.
  id         String    @id @unique() @db.VarChar
  email      String    @unique() @db.VarChar(255)
  first_name String    @db.VarChar(32)
  last_name  String?   @db.VarChar(32)
  mobile     String?   @db.VarChar(20)
  birthday   DateTime? @db.Timestamptz()

  location_lat      Float?  @db.DoublePrecision
  location_lon      Float?  @db.DoublePrecision
  location_address  String? @db.VarChar(256)
  location_postcode String? @db.VarChar(16)
  location_display  String? @db.VarChar

  stripe_customer_id  String? @db.VarChar(128)
  stripe_setup_secret String? @db.VarChar(512)

  // Toggles
  is_test_account Boolean @db.Boolean

  // Metadata
  created_at  DateTime? @default(now()) @db.Timestamptz()
  last_active DateTime? @db.Timestamptz()

  // Relations
  orders    Order[]
  bookings  Booking[]
  following FollowRelation[]

  affiliate_submissions AffiliateSubmission[]

  @@map(name: "user")
}

model Order {
  id             String   @id @default(uuid())
  token          String   @unique() @default(uuid())
  user_facing_id String   @db.VarChar(16)
  booked_for     DateTime @db.Timestamptz()
  heads          Decimal  @db.Decimal

  from_slug String @db.VarChar

  // Payment information
  /// type OrderPrice
  price Json

  /// type RefundDetails
  refund Json?

  /// type PaymentCardDetails
  payment_card   Json?
  payment_method String? @db.VarChar
  discount_code  String? @db.VarChar

  created_at DateTime? @db.Timestamptz()
  updated_at DateTime? @updatedAt @db.Timestamptz()

  paid_at      DateTime? @db.Timestamptz()
  abandoned_at DateTime? @db.Timestamptz()

  tastiest_portion   Float? @db.DoublePrecision
  restaurant_portion Float? @db.DoublePrecision

  /// Specifically at the time the order was made.
  is_user_following Boolean
  is_test           Boolean

  // Relations
  product    ExperienceProduct @relation(fields: [product_id], references: [id])
  product_id String            @db.VarChar

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.VarChar

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String     @db.VarChar

  booking Booking?

  @@map(name: "order")
}

model Booking {
  id         String   @id @default(uuid())
  booked_for DateTime @db.Timestamptz()

  cancelled_at      DateTime? @db.Timestamptz()
  confirmation_code String    @db.VarChar

  // Bools
  has_arrived                   Boolean @default(false)
  has_cancelled                 Boolean @default(false)
  is_test                       Boolean @default(false)
  is_confirmation_code_verified Boolean @default(false)
  is_synced_with_booking_system Boolean @default(false)

  // Relations
  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String     @db.VarChar

  order    Order  @relation(fields: [order_id], references: [id])
  order_id String @unique @db.VarChar

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.VarChar

  @@map(name: "booking")
}

model Restaurant {
  /// Set by Firebase Auth.
  id       String @unique() @db.VarChar
  name     String @db.VarChar
  city     String @db.VarChar
  cuisine  String @db.VarChar
  uri_name String @db.VarChar

  location_lat      Float?  @db.DoublePrecision
  location_lon      Float?  @db.DoublePrecision
  location_address  String? @db.VarChar(256)
  location_postcode String? @db.VarChar(16)
  location_display  String? @db.VarChar

  contact_first_name   String? @db.VarChar
  contact_last_name    String? @db.VarChar
  contact_email        String? @db.VarChar
  contact_phone_number String? @db.VarChar

  realtime_available_booking_slots String[]
  realtime_last_slots_sync         DateTime? @db.Timestamptz()

  booking_system     String? @db.VarChar
  has_accepted_terms Boolean @default(false)

  /// type StripeAccount
  financial_connect_account Json?  @db.JsonB
  financial_cut_default     Float? @default(0.9) @db.DoublePrecision
  financial_cut_followers   Float? @default(0.95) @db.DoublePrecision

  /// type WeekQuietTimes
  metrics_quiet_times Json?
  /// type WeekOpenTimes
  metrics_open_times  Json?

  metrics_seating_duration Int? @db.Integer

  settings_notify_bookings     Boolean @default(true)
  settings_fallback_open_times Boolean @default(true)

  // Toggles
  is_demo           Boolean @default(false)
  is_archived       Boolean @default(false)
  is_setup_complete Boolean @default(false)

  // Relations
  orders    Order[]
  bookings  Booking[]
  followers FollowRelation[]
  profile   RestaurantProfile?

  posts    ExperiencePost[]
  products ExperienceProduct[]

  @@map(name: "restaurant")
}

model RestaurantProfile {
  id                  String  @id() @default(uuid())
  website             String? @db.VarChar
  public_phone_number String? @db.VarChar

  /// type Media
  profile_picture Json? @db.JsonB

  /// type Media
  backdrop_video Json? @db.JsonB

  /// type Media
  backdrop_still_frame Json? @db.JsonB

  /// type Media
  display_photograph Json? @db.JsonB

  /// type Media
  hero_illustration Json? @db.JsonB

  /// type YouTubeVideo[]
  feature_videos Json? @db.JsonB

  /// type Document
  description Json? @db.JsonB

  /// type MetaDetails
  meta Json? @db.JsonB

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String     @unique @db.VarChar

  @@map(name: "restaurant_profile")
}

model ExperiencePost {
  id    String   @id() @default(uuid()) @db.VarChar()
  title String   @db.VarChar()
  date  DateTime @db.Timestamptz()

  /// type Document
  body                  Json?   @db.JsonB
  city                  String  @db.VarChar(32)
  cuisine               String  @db.VarChar(32)
  description           String  @db.VarChar(512)
  see_restaurant_button String?

  // Visual items
  /// Eg. East London
  /// Displayed under the title
  display_location String @db.VarChar(512)

  /// type Media
  plate_image Json? @db.JsonB

  /// type Media
  menu_image Json? @db.JsonB

  /// type Media
  auxiliary_image Json? @db.JsonB

  // Descriptive
  /// type MetaDetails
  meta Json?    @db.JsonB
  slug String   @db.VarChar
  tags String[]

  product    ExperienceProduct @relation(fields: [product_id], references: [id])
  product_id String            @unique @db.VarChar

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String     @unique @db.VarChar

  @@map(name: "post")
}

model ExperienceProduct {
  id            String @id() @default(uuid()) @db.VarChar()
  name          String @db.VarChar
  allowed_heads Int[]

  /// type Media
  image Json? @db.JsonB

  /// Per head, in GBP
  price Float @db.DoublePrecision

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String     @unique @db.VarChar

  orders Order[]
  post   ExperiencePost?

  @@map(name: "product")
}

/// A relation between a restaurant and a user following them.
model FollowRelation {
  id String @id @default(uuid())

  followed_at DateTime @db.Timestamptz()

  notify_new_menu            Boolean @default(true)
  notify_general_info        Boolean @default(true)
  notify_last_minute_tables  Boolean @default(true)
  notify_limited_time_dishes Boolean @default(true)
  notify_special_experiences Boolean @default(true)

  user    User   @relation(fields: [user_id], references: [id])
  user_id String @db.VarChar

  restaurant    Restaurant @relation(fields: [restaurant_id], references: [id])
  restaurant_id String     @db.VarChar

  @@map(name: "follow_relation")
}

model RestaurateurApplication {
  id                 String @id() @default(uuid())
  name               String @db.VarChar
  email              String @db.VarChar
  contact_number     String @db.VarChar
  restaurant_name    String @db.VarChar
  restaurant_website String @db.VarChar
  restaurant_address String @db.VarChar
  description        String @db.VarChar

  @@map(name: "restaurataur_application")
}

model AffiliateSubmission {
  id             String @id() @default(uuid())
  platform       String @db.VarChar
  reference      String @db.VarChar
  affiliate_type String @default("") @db.VarChar

  user_id String? @db.VarChar
  user    User?   @relation(fields: [user_id], references: [id])

  @@map(name: "affiliate_submission")
}
